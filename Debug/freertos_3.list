
freertos_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a4  080072a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080072a4  080072a4  000172a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072ac  080072ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072b0  080072b0  000172b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080072b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e54  20000074  08007328  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ec8  08007328  00024ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f530  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b9a  00000000  00000000  0003f5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c0  00000000  00000000  00043170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  00044a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005167  00000000  00000000  00046168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000148c7  00000000  00000000  0004b2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd03f  00000000  00000000  0005fb96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015cbd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e04  00000000  00000000  0015cc50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007178 	.word	0x08007178

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007178 	.word	0x08007178

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800051c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	2b00      	cmp	r3, #0
 8000526:	d013      	beq.n	8000550 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000528:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800052c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000530:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00b      	beq.n	8000550 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000538:	e000      	b.n	800053c <ITM_SendChar+0x2c>
    {
      __NOP();
 800053a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800053c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000546:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fc70 	bl	8000e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f829 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f91b 	bl	80007a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000572:	f000 f8bb 	bl	80006ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000576:	f000 f8e9 	bl	800074c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057a:	f003 fb61 	bl	8003c40 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <main+0x4c>)
 8000580:	2100      	movs	r1, #0
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0x50>)
 8000584:	f003 fbc6 	bl	8003d14 <osThreadNew>
 8000588:	4602      	mov	r2, r0
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x54>)
 800058c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate( vTask1, "Task 1", 1000, NULL, 1, NULL );
 800058e:	2300      	movs	r3, #0
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2301      	movs	r3, #1
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059c:	4906      	ldr	r1, [pc, #24]	; (80005b8 <main+0x58>)
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <main+0x5c>)
 80005a0:	f004 faca 	bl	8004b38 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f003 fb80 	bl	8003ca8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x48>
 80005aa:	bf00      	nop
 80005ac:	08007204 	.word	0x08007204
 80005b0:	08000a09 	.word	0x08000a09
 80005b4:	200049a4 	.word	0x200049a4
 80005b8:	0800719c 	.word	0x0800719c
 80005bc:	08000975 	.word	0x08000975

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0b4      	sub	sp, #208	; 0xd0
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 f961 	bl	8006896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2284      	movs	r2, #132	; 0x84
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f006 f952 	bl	8006896 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f2:	f001 f867 	bl	80016c4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <SystemClock_Config+0x120>)
 80005f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fa:	4a39      	ldr	r2, [pc, #228]	; (80006e0 <SystemClock_Config+0x120>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	6413      	str	r3, [r2, #64]	; 0x40
 8000602:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <SystemClock_Config+0x120>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060e:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <SystemClock_Config+0x124>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <SystemClock_Config+0x124>)
 8000614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <SystemClock_Config+0x124>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2301      	movs	r3, #1
 8000628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000642:	2304      	movs	r3, #4
 8000644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000648:	23d8      	movs	r3, #216	; 0xd8
 800064a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000654:	2309      	movs	r3, #9
 8000656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f890 	bl	8001784 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800066a:	f000 f9e7 	bl	8000a3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066e:	f001 f839 	bl	80016e4 <HAL_PWREx_EnableOverDrive>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000678:	f000 f9e0 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800069e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006a2:	2107      	movs	r1, #7
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fb11 	bl	8001ccc <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006b0:	f000 f9c4 	bl	8000a3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <SystemClock_Config+0x128>)
 80006b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fd2a 	bl	8002120 <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x116>
  {
    Error_Handler();
 80006d2:	f000 f9b3 	bl	8000a3c <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	37d0      	adds	r7, #208	; 0xd0
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000
 80006e8:	00200100 	.word	0x00200100

080006ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART3_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART3_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART3_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000730:	f002 fbc6 	bl	8002ec0 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f97f 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200049ac 	.word	0x200049ac
 8000748:	40004800 	.word	0x40004800

0800074c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075a:	2206      	movs	r2, #6
 800075c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000760:	2202      	movs	r2, #2
 8000762:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076c:	2202      	movs	r2, #2
 800076e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	2201      	movs	r2, #1
 8000774:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2201      	movs	r2, #1
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	f000 fe4f 	bl	8001432 <HAL_PCD_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f94f 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20004a30 	.word	0x20004a30

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b67      	ldr	r3, [pc, #412]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a66      	ldr	r2, [pc, #408]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b64      	ldr	r3, [pc, #400]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	4b61      	ldr	r3, [pc, #388]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a60      	ldr	r2, [pc, #384]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b5e      	ldr	r3, [pc, #376]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b5b      	ldr	r3, [pc, #364]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a5a      	ldr	r2, [pc, #360]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b58      	ldr	r3, [pc, #352]	; (800095c <MX_GPIO_Init+0x1b4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b55      	ldr	r3, [pc, #340]	; (800095c <MX_GPIO_Init+0x1b4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a54      	ldr	r2, [pc, #336]	; (800095c <MX_GPIO_Init+0x1b4>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b52      	ldr	r3, [pc, #328]	; (800095c <MX_GPIO_Init+0x1b4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4b4f      	ldr	r3, [pc, #316]	; (800095c <MX_GPIO_Init+0x1b4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a4e      	ldr	r2, [pc, #312]	; (800095c <MX_GPIO_Init+0x1b4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b4c      	ldr	r3, [pc, #304]	; (800095c <MX_GPIO_Init+0x1b4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	4b49      	ldr	r3, [pc, #292]	; (800095c <MX_GPIO_Init+0x1b4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a48      	ldr	r2, [pc, #288]	; (800095c <MX_GPIO_Init+0x1b4>)
 800083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b46      	ldr	r3, [pc, #280]	; (800095c <MX_GPIO_Init+0x1b4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f244 0181 	movw	r1, #16513	; 0x4081
 8000854:	4842      	ldr	r0, [pc, #264]	; (8000960 <MX_GPIO_Init+0x1b8>)
 8000856:	f000 fdd3 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2140      	movs	r1, #64	; 0x40
 800085e:	4841      	ldr	r0, [pc, #260]	; (8000964 <MX_GPIO_Init+0x1bc>)
 8000860:	f000 fdce 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <MX_GPIO_Init+0x1c0>)
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	483c      	ldr	r0, [pc, #240]	; (800096c <MX_GPIO_Init+0x1c4>)
 800087a:	f000 fc17 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800087e:	2332      	movs	r3, #50	; 0x32
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4834      	ldr	r0, [pc, #208]	; (800096c <MX_GPIO_Init+0x1c4>)
 800089a:	f000 fc07 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800089e:	2386      	movs	r3, #134	; 0x86
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ae:	230b      	movs	r3, #11
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	482d      	ldr	r0, [pc, #180]	; (8000970 <MX_GPIO_Init+0x1c8>)
 80008ba:	f000 fbf7 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008be:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4822      	ldr	r0, [pc, #136]	; (8000960 <MX_GPIO_Init+0x1b8>)
 80008d8:	f000 fbe8 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ee:	230b      	movs	r3, #11
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4819      	ldr	r0, [pc, #100]	; (8000960 <MX_GPIO_Init+0x1b8>)
 80008fa:	f000 fbd7 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fe:	2340      	movs	r3, #64	; 0x40
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <MX_GPIO_Init+0x1bc>)
 8000916:	f000 fbc9 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_GPIO_Init+0x1bc>)
 800092e:	f000 fbbd 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000932:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000944:	230b      	movs	r3, #11
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_GPIO_Init+0x1bc>)
 8000950:	f000 fbac 	bl	80010ac <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	40021800 	.word	0x40021800
 8000968:	10110000 	.word	0x10110000
 800096c:	40020800 	.word	0x40020800
 8000970:	40020000 	.word	0x40020000

08000974 <vTask1>:

/* USER CODE BEGIN 4 */
void vTask1( void *pvParameters )
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af02      	add	r7, sp, #8
 800097a:	6078      	str	r0, [r7, #4]
	for( ;; ){
		/* Сигнализировать о выполнении Задачи 1 */
		printf("Task1 is running\n");
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <vTask1+0x30>)
 800097e:	f005 ffef 	bl	8006960 <puts>
		/* Динамически (после старта планировщика) создать
		Задачу 2 с приоритетом 2.
		Она сразу же получит управление */
		xTaskCreate( vTask2, "Task 2", 1000, NULL, 2, NULL );
 8000982:	2300      	movs	r3, #0
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	2302      	movs	r3, #2
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2300      	movs	r3, #0
 800098c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000990:	4905      	ldr	r1, [pc, #20]	; (80009a8 <vTask1+0x34>)
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <vTask1+0x38>)
 8000994:	f004 f8d0 	bl	8004b38 <xTaskCreate>
		времени. Когда Задача 2 уничтожила сама себя,
		управление снова получает Задача 1 и переходит
		в блокированное состояние на 100 мс. Так что в системе
		не остается задач, готовых к выполнению, и выполняется
		задача Бездействие */
		vTaskDelay(1000);
 8000998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099c:	f004 fa86 	bl	8004eac <vTaskDelay>
	for( ;; ){
 80009a0:	e7ec      	b.n	800097c <vTask1+0x8>
 80009a2:	bf00      	nop
 80009a4:	080071a4 	.word	0x080071a4
 80009a8:	080071b8 	.word	0x080071b8
 80009ac:	080009b1 	.word	0x080009b1

080009b0 <vTask2>:
	vTaskDelete( NULL );
}
/*-----------------------------------------------------------*/
/* Функция Задачи 2 */
void vTask2( void *pvParameters )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	/* Задача 2 не делает ничего, кроме сигнализации о своем
	выполнении, и сама себя уничтожает. Тело функции
	не содержит бесконечного цикла, так как в нем нет
	необходимости. Тело функции Задачи 2 выполнится 1 раз,
	после чего задача будет уничтожена. */
	printf("Task2 is running and about to delete itself\n");
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <vTask2+0x1c>)
 80009ba:	f005 ffd1 	bl	8006960 <puts>
	vTaskDelete( NULL );
 80009be:	2000      	movs	r0, #0
 80009c0:	f004 fa00 	bl	8004dc4 <vTaskDelete>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	080071c0 	.word	0x080071c0

080009d0 <_write>:


int _write(int file, char *ptr, int len)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0;DataIdx<len;DataIdx++)
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e009      	b.n	80009f6 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	60ba      	str	r2, [r7, #8]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fd90 	bl	8000510 <ITM_SendChar>
	for(DataIdx=0;DataIdx<len;DataIdx++)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dbf1      	blt.n	80009e2 <_write+0x12>
	}
	return len;
 80009fe:	687b      	ldr	r3, [r7, #4]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f003 fa25 	bl	8003e60 <osDelay>
 8000a16:	e7fb      	b.n	8000a10 <StartDefaultTask+0x8>

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 fa1b 	bl	8000e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010000 	.word	0x40010000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x6>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	f06f 0001 	mvn.w	r0, #1
 8000a82:	f000 fae9 	bl	8001058 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_UART_MspInit+0x7c>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d128      	bne.n	8000b08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0x80>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <HAL_UART_MspInit+0x80>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0x80>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0x80>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_UART_MspInit+0x80>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_UART_MspInit+0x80>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af8:	2307      	movs	r3, #7
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_UART_MspInit+0x84>)
 8000b04:	f000 fad2 	bl	80010ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40004800 	.word	0x40004800
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020c00 	.word	0x40020c00

08000b1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b3c:	d141      	bne.n	8000bc2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b56:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b68:	230a      	movs	r3, #10
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <HAL_PCD_MspInit+0xb4>)
 8000b74:	f000 fa9a 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <HAL_PCD_MspInit+0xb4>)
 8000b8e:	f000 fa8d 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6353      	str	r3, [r2, #52]	; 0x34
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_PCD_MspInit+0xb0>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2019      	movs	r0, #25
 8000bea:	f000 fa35 	bl	8001058 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bee:	2019      	movs	r0, #25
 8000bf0:	f000 fa4e 	bl	8001090 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <HAL_InitTick+0xa0>)
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <HAL_InitTick+0xa0>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_InitTick+0xa0>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0c:	f107 0210 	add.w	r2, r7, #16
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 fa50 	bl	80020bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c1c:	f001 fa3a 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 8000c20:	4603      	mov	r3, r0
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0c9b      	lsrs	r3, r3, #18
 8000c30:	3b01      	subs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <HAL_InitTick+0xac>)
 8000c38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c56:	f001 fe53 	bl	8002900 <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d104      	bne.n	8000c6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c62:	f001 feaf 	bl	80029c4 <HAL_TIM_Base_Start_IT>
 8000c66:	4603      	mov	r3, r0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	431bde83 	.word	0x431bde83
 8000c7c:	20004e34 	.word	0x20004e34
 8000c80:	40010000 	.word	0x40010000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cb6:	f001 fefd 	bl	8002ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20004e34 	.word	0x20004e34

08000cc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e00a      	b.n	8000cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4601      	mov	r1, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <_read+0x12>
	}

return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
	return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f005 fd48 	bl	800682c <__errno>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	230c      	movs	r3, #12
 8000da0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20050000 	.word	0x20050000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	20000090 	.word	0x20000090
 8000dd0:	20004ec8 	.word	0x20004ec8

08000dd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfe:	490e      	ldr	r1, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e14:	4c0b      	ldr	r4, [pc, #44]	; (8000e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e22:	f7ff ffd7 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f005 fd07 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fb99 	bl	8000560 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e3c:	080072b4 	.word	0x080072b4
  ldr r2, =_sbss
 8000e40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e44:	20004ec8 	.word	0x20004ec8

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>

08000e4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f8f7 	bl	8001042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff febd 	bl	8000bd4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e5a:	f7ff fdf3 	bl	8000a44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20004e80 	.word	0x20004e80

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20004e80 	.word	0x20004e80

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_Delay+0x40>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <__NVIC_SetPriorityGrouping>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <__NVIC_SetPriorityGrouping+0x40>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x40>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00
 8000f2c:	05fa0000 	.word	0x05fa0000

08000f30 <__NVIC_GetPriorityGrouping>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff4c 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106a:	f7ff ff61 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 800106e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f7ff ffb1 	bl	8000fdc <NVIC_EncodePriority>
 800107a:	4602      	mov	r2, r0
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff80 	bl	8000f88 <__NVIC_SetPriority>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff54 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e175      	b.n	80013b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8164 	bne.w	80013b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d00b      	beq.n	800110a <HAL_GPIO_Init+0x5e>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fe:	2b11      	cmp	r3, #17
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b12      	cmp	r3, #18
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x100>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b12      	cmp	r3, #18
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80be 	beq.w	80013b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b65      	ldr	r3, [pc, #404]	; (80013cc <HAL_GPIO_Init+0x320>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a64      	ldr	r2, [pc, #400]	; (80013cc <HAL_GPIO_Init+0x320>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b62      	ldr	r3, [pc, #392]	; (80013cc <HAL_GPIO_Init+0x320>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800124e:	4a60      	ldr	r2, [pc, #384]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a57      	ldr	r2, [pc, #348]	; (80013d4 <HAL_GPIO_Init+0x328>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d037      	beq.n	80012ea <HAL_GPIO_Init+0x23e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a56      	ldr	r2, [pc, #344]	; (80013d8 <HAL_GPIO_Init+0x32c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d031      	beq.n	80012e6 <HAL_GPIO_Init+0x23a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a55      	ldr	r2, [pc, #340]	; (80013dc <HAL_GPIO_Init+0x330>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d02b      	beq.n	80012e2 <HAL_GPIO_Init+0x236>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a54      	ldr	r2, [pc, #336]	; (80013e0 <HAL_GPIO_Init+0x334>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d025      	beq.n	80012de <HAL_GPIO_Init+0x232>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <HAL_GPIO_Init+0x338>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_GPIO_Init+0x22e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <HAL_GPIO_Init+0x33c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x22a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a51      	ldr	r2, [pc, #324]	; (80013ec <HAL_GPIO_Init+0x340>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <HAL_GPIO_Init+0x344>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x222>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4f      	ldr	r2, [pc, #316]	; (80013f4 <HAL_GPIO_Init+0x348>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x21e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <HAL_GPIO_Init+0x34c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x21a>
 80012c2:	2309      	movs	r3, #9
 80012c4:	e012      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012c6:	230a      	movs	r3, #10
 80012c8:	e010      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ca:	2308      	movs	r3, #8
 80012cc:	e00e      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e00c      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e00a      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012da:	2304      	movs	r3, #4
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012fc:	4934      	ldr	r1, [pc, #208]	; (80013d0 <HAL_GPIO_Init+0x324>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <HAL_GPIO_Init+0x350>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132e:	4a33      	ldr	r2, [pc, #204]	; (80013fc <HAL_GPIO_Init+0x350>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_GPIO_Init+0x350>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001358:	4a28      	ldr	r2, [pc, #160]	; (80013fc <HAL_GPIO_Init+0x350>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_GPIO_Init+0x350>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <HAL_GPIO_Init+0x350>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_GPIO_Init+0x350>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_GPIO_Init+0x350>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f ae86 	bls.w	80010cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	3724      	adds	r7, #36	; 0x24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40021400 	.word	0x40021400
 80013ec:	40021800 	.word	0x40021800
 80013f0:	40021c00 	.word	0x40021c00
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40022400 	.word	0x40022400
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001434:	b08f      	sub	sp, #60	; 0x3c
 8001436:	af0a      	add	r7, sp, #40	; 0x28
 8001438:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e116      	b.n	8001672 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fb5c 	bl	8000b1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f002 f974 	bl	8003770 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	687e      	ldr	r6, [r7, #4]
 8001490:	466d      	mov	r5, sp
 8001492:	f106 0410 	add.w	r4, r6, #16
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014a6:	1d33      	adds	r3, r6, #4
 80014a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	f002 f908 	bl	80036c0 <USB_CoreInit>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2202      	movs	r2, #2
 80014ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0d7      	b.n	8001672 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f962 	bl	8003792 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e04a      	b.n	800156a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	333d      	adds	r3, #61	; 0x3d
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	1a9b      	subs	r3, r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	333c      	adds	r3, #60	; 0x3c
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	b298      	uxth	r0, r3
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	3342      	adds	r3, #66	; 0x42
 8001510:	4602      	mov	r2, r0
 8001512:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	333f      	adds	r3, #63	; 0x3f
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3344      	adds	r3, #68	; 0x44
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	3348      	adds	r3, #72	; 0x48
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	3350      	adds	r3, #80	; 0x50
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	3301      	adds	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	d3af      	bcc.n	80014d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e044      	b.n	8001604 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	3301      	adds	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3b5      	bcc.n	800157a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	687e      	ldr	r6, [r7, #4]
 8001616:	466d      	mov	r5, sp
 8001618:	f106 0410 	add.w	r4, r6, #16
 800161c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001624:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001628:	e885 0003 	stmia.w	r5, {r0, r1}
 800162c:	1d33      	adds	r3, r6, #4
 800162e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f002 f8d9 	bl	80037e8 <USB_DevInit>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e014      	b.n	8001672 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f80b 	bl	800167c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f002 fa8b 	bl	8003b86 <USB_DevDisconnect>

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800167c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	10000003 	.word	0x10000003

080016c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_PWREx_EnableOverDrive+0x98>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001712:	f7ff fbbb 	bl	8000e8c <HAL_GetTick>
 8001716:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001718:	e009      	b.n	800172e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800171a:	f7ff fbb7 	bl	8000e8c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001728:	d901      	bls.n	800172e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e022      	b.n	8001774 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173a:	d1ee      	bne.n	800171a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001748:	f7ff fba0 	bl	8000e8c <HAL_GetTick>
 800174c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800174e:	e009      	b.n	8001764 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001750:	f7ff fb9c 	bl	8000e8c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175e:	d901      	bls.n	8001764 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e007      	b.n	8001774 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001770:	d1ee      	bne.n	8001750 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000

08001784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e291      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8087 	beq.w	80018b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a8:	4b96      	ldr	r3, [pc, #600]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d00c      	beq.n	80017ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b4:	4b93      	ldr	r3, [pc, #588]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62>
 80017c0:	4b90      	ldr	r3, [pc, #576]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017cc:	d10b      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ce:	4b8d      	ldr	r3, [pc, #564]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x130>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d168      	bne.n	80018b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e26b      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x7a>
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a83      	ldr	r2, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e02e      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x9c>
 8001806:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b7c      	ldr	r3, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7b      	ldr	r2, [pc, #492]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0xc0>
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a75      	ldr	r2, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a72      	ldr	r2, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xd8>
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6b      	ldr	r2, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fb12 	bl	8000e8c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fb0e 	bl	8000e8c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e21f      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xe8>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fafe 	bl	8000e8c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fafa 	bl	8000e8c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e20b      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x110>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d069      	beq.n	8001996 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x190>
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x17a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1df      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	493d      	ldr	r1, [pc, #244]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e040      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fab0 	bl	8000e8c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff faac 	bl	8000e8c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1bd      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4929      	ldr	r1, [pc, #164]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
 8001962:	e018      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fa8c 	bl	8000e8c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001978:	f7ff fa88 	bl	8000e8c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e199      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d038      	beq.n	8001a14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fa69 	bl	8000e8c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff fa65 	bl	8000e8c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e176      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x23a>
 80019dc:	e01a      	b.n	8001a14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff fa4f 	bl	8000e8c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff fa4b 	bl	8000e8c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d903      	bls.n	8001a08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e15c      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
 8001a04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	4b91      	ldr	r3, [pc, #580]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a4 	beq.w	8001b6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a87      	ldr	r2, [pc, #540]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4a:	4b82      	ldr	r3, [pc, #520]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7e      	ldr	r2, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa13 	bl	8000e8c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff fa0f 	bl	8000e8c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e120      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x31a>
 8001a90:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9c:	e02d      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x33c>
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a69      	ldr	r2, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a66      	ldr	r2, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	e01c      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x35e>
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a60      	ldr	r2, [pc, #384]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a5a      	ldr	r2, [pc, #360]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff f9c3 	bl	8000e8c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff f9bf 	bl	8000e8c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0ce      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <HAL_RCC_OscConfig+0x386>
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f9ad 	bl	8000e8c <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff f9a9 	bl	8000e8c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0b8      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a4 	beq.w	8001cbc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d06b      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d149      	bne.n	8001c1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a30      	ldr	r2, [pc, #192]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f97a 	bl	8000e8c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f976 	bl	8000e8c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e087      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	4313      	orrs	r3, r2
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001be2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001be6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f94a 	bl	8000e8c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f946 	bl	8000e8c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e057      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x478>
 8001c1a:	e04f      	b.n	8001cbc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f930 	bl	8000e8c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f92c 	bl	8000e8c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e03d      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4ac>
 8001c4e:	e035      	b.n	8001cbc <HAL_RCC_OscConfig+0x538>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x544>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d028      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d121      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d11a      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0d0      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d910      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 020f 	bic.w	r2, r3, #15
 8001cfa:	4965      	ldr	r1, [pc, #404]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b8      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a58      	ldr	r2, [pc, #352]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	494d      	ldr	r1, [pc, #308]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d040      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d115      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e073      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06b      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4936      	ldr	r1, [pc, #216]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f864 	bl	8000e8c <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff f860 	bl	8000e8c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e053      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d210      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 020f 	bic.w	r2, r3, #15
 8001e06:	4922      	ldr	r1, [pc, #136]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e032      	b.n	8001e86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4916      	ldr	r1, [pc, #88]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	490e      	ldr	r1, [pc, #56]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e5e:	f000 f821 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e62:	4601      	mov	r1, r0
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x1cc>)
 8001e70:	5cd3      	ldrb	r3, [r2, r3]
 8001e72:	fa21 f303 	lsr.w	r3, r1, r3
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <HAL_RCC_ClockConfig+0x1d0>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_ClockConfig+0x1d4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fea8 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00
 8001e94:	40023800 	.word	0x40023800
 8001e98:	08007228 	.word	0x08007228
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d007      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x32>
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d008      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x38>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 80b4 	bne.w	8002038 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b5e      	ldr	r3, [pc, #376]	; (800204c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ed2:	60bb      	str	r3, [r7, #8]
      break;
 8001ed4:	e0b3      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed6:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ed8:	60bb      	str	r3, [r7, #8]
      break;
 8001eda:	e0b0      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001edc:	4b5a      	ldr	r3, [pc, #360]	; (8002048 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ee6:	4b58      	ldr	r3, [pc, #352]	; (8002048 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d04a      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	4b55      	ldr	r3, [pc, #340]	; (8002048 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	f04f 0400 	mov.w	r4, #0
 8001efc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	ea03 0501 	and.w	r5, r3, r1
 8001f08:	ea04 0602 	and.w	r6, r4, r2
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	4632      	mov	r2, r6
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	f04f 0400 	mov.w	r4, #0
 8001f18:	0154      	lsls	r4, r2, #5
 8001f1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f1e:	014b      	lsls	r3, r1, #5
 8001f20:	4619      	mov	r1, r3
 8001f22:	4622      	mov	r2, r4
 8001f24:	1b49      	subs	r1, r1, r5
 8001f26:	eb62 0206 	sbc.w	r2, r2, r6
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	f04f 0400 	mov.w	r4, #0
 8001f32:	0194      	lsls	r4, r2, #6
 8001f34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f38:	018b      	lsls	r3, r1, #6
 8001f3a:	1a5b      	subs	r3, r3, r1
 8001f3c:	eb64 0402 	sbc.w	r4, r4, r2
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	00e2      	lsls	r2, r4, #3
 8001f4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f4e:	00d9      	lsls	r1, r3, #3
 8001f50:	460b      	mov	r3, r1
 8001f52:	4614      	mov	r4, r2
 8001f54:	195b      	adds	r3, r3, r5
 8001f56:	eb44 0406 	adc.w	r4, r4, r6
 8001f5a:	f04f 0100 	mov.w	r1, #0
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	0262      	lsls	r2, r4, #9
 8001f64:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f68:	0259      	lsls	r1, r3, #9
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4614      	mov	r4, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	4621      	mov	r1, r4
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f04f 0400 	mov.w	r4, #0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4623      	mov	r3, r4
 8001f7c:	f7fe f948 	bl	8000210 <__aeabi_uldivmod>
 8001f80:	4603      	mov	r3, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e049      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	f04f 0400 	mov.w	r4, #0
 8001f92:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	ea03 0501 	and.w	r5, r3, r1
 8001f9e:	ea04 0602 	and.w	r6, r4, r2
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	4632      	mov	r2, r6
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	f04f 0400 	mov.w	r4, #0
 8001fae:	0154      	lsls	r4, r2, #5
 8001fb0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fb4:	014b      	lsls	r3, r1, #5
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4622      	mov	r2, r4
 8001fba:	1b49      	subs	r1, r1, r5
 8001fbc:	eb62 0206 	sbc.w	r2, r2, r6
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	f04f 0400 	mov.w	r4, #0
 8001fc8:	0194      	lsls	r4, r2, #6
 8001fca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fce:	018b      	lsls	r3, r1, #6
 8001fd0:	1a5b      	subs	r3, r3, r1
 8001fd2:	eb64 0402 	sbc.w	r4, r4, r2
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	00e2      	lsls	r2, r4, #3
 8001fe0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fe4:	00d9      	lsls	r1, r3, #3
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4614      	mov	r4, r2
 8001fea:	195b      	adds	r3, r3, r5
 8001fec:	eb44 0406 	adc.w	r4, r4, r6
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	02a2      	lsls	r2, r4, #10
 8001ffa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ffe:	0299      	lsls	r1, r3, #10
 8002000:	460b      	mov	r3, r1
 8002002:	4614      	mov	r4, r2
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f04f 0400 	mov.w	r4, #0
 800200e:	461a      	mov	r2, r3
 8002010:	4623      	mov	r3, r4
 8002012:	f7fe f8fd 	bl	8000210 <__aeabi_uldivmod>
 8002016:	4603      	mov	r3, r0
 8002018:	460c      	mov	r4, r1
 800201a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	3301      	adds	r3, #1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	60bb      	str	r3, [r7, #8]
      break;
 8002036:	e002      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800203a:	60bb      	str	r3, [r7, #8]
      break;
 800203c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800203e:	68bb      	ldr	r3, [r7, #8]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	00f42400 	.word	0x00f42400
 8002050:	007a1200 	.word	0x007a1200

08002054 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_RCC_GetHCLKFreq+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000000 	.word	0x20000000

0800206c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002070:	f7ff fff0 	bl	8002054 <HAL_RCC_GetHCLKFreq>
 8002074:	4601      	mov	r1, r0
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0a9b      	lsrs	r3, r3, #10
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	08007238 	.word	0x08007238

08002094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002098:	f7ff ffdc 	bl	8002054 <HAL_RCC_GetHCLKFreq>
 800209c:	4601      	mov	r1, r0
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	0b5b      	lsrs	r3, r3, #13
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4a03      	ldr	r2, [pc, #12]	; (80020b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	08007238 	.word	0x08007238

080020bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	220f      	movs	r2, #15
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_RCC_GetClockConfig+0x5c>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_RCC_GetClockConfig+0x5c>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_GetClockConfig+0x5c>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_RCC_GetClockConfig+0x60>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 020f 	and.w	r2, r3, #15
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	601a      	str	r2, [r3, #0]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	40023c00 	.word	0x40023c00

08002120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d012      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002148:	4b69      	ldr	r3, [pc, #420]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a68      	ldr	r2, [pc, #416]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002152:	6093      	str	r3, [r2, #8]
 8002154:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	4964      	ldr	r1, [pc, #400]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d017      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	4959      	ldr	r1, [pc, #356]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002198:	d101      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d017      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021b6:	4b4e      	ldr	r3, [pc, #312]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	494a      	ldr	r1, [pc, #296]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d4:	d101      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 808b 	beq.w	800231a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	4a39      	ldr	r2, [pc, #228]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	6413      	str	r3, [r2, #64]	; 0x40
 8002210:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a34      	ldr	r2, [pc, #208]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002228:	f7fe fe30 	bl	8000e8c <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7fe fe2c 	bl	8000e8c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e357      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d035      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d02e      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800226c:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d114      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fdf4 	bl	8000e8c <HAL_GetTick>
 80022a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fe fdf0 	bl	8000e8c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e319      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ee      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022d6:	d111      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022e6:	400b      	ands	r3, r1
 80022e8:	4901      	ldr	r1, [pc, #4]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
 80022ee:	e00b      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	0ffffcff 	.word	0x0ffffcff
 80022fc:	4bb1      	ldr	r3, [pc, #708]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4ab0      	ldr	r2, [pc, #704]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002302:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	4bae      	ldr	r3, [pc, #696]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800230a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	49ab      	ldr	r1, [pc, #684]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002326:	4ba7      	ldr	r3, [pc, #668]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800232c:	4aa5      	ldr	r2, [pc, #660]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800232e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002332:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002336:	4ba3      	ldr	r3, [pc, #652]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002338:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	49a0      	ldr	r1, [pc, #640]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002354:	4b9b      	ldr	r3, [pc, #620]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002362:	4998      	ldr	r1, [pc, #608]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002376:	4b93      	ldr	r3, [pc, #588]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002384:	498f      	ldr	r1, [pc, #572]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002398:	4b8a      	ldr	r3, [pc, #552]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a6:	4987      	ldr	r1, [pc, #540]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ba:	4b82      	ldr	r3, [pc, #520]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	497e      	ldr	r1, [pc, #504]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023dc:	4b79      	ldr	r3, [pc, #484]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4976      	ldr	r1, [pc, #472]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023fe:	4b71      	ldr	r3, [pc, #452]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f023 020c 	bic.w	r2, r3, #12
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240c:	496d      	ldr	r1, [pc, #436]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002420:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	4965      	ldr	r1, [pc, #404]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002442:	4b60      	ldr	r3, [pc, #384]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	495c      	ldr	r1, [pc, #368]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002464:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	4954      	ldr	r1, [pc, #336]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002486:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	494b      	ldr	r1, [pc, #300]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	4943      	ldr	r1, [pc, #268]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024ca:	4b3e      	ldr	r3, [pc, #248]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d8:	493a      	ldr	r1, [pc, #232]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024fa:	4932      	ldr	r1, [pc, #200]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d011      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251c:	4929      	ldr	r1, [pc, #164]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252c:	d101      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800252e:	2301      	movs	r3, #1
 8002530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800253e:	2301      	movs	r3, #1
 8002540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	4919      	ldr	r1, [pc, #100]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002580:	4910      	ldr	r1, [pc, #64]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d006      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80d9 	beq.w	800274e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe fc70 	bl	8000e8c <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ae:	e00b      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025b0:	f7fe fc6c 	bl	8000e8c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d904      	bls.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e197      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ed      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d021      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11d      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ee:	0c1b      	lsrs	r3, r3, #16
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025f6:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fc:	0e1b      	lsrs	r3, r3, #24
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	019a      	lsls	r2, r3, #6
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	061b      	lsls	r3, r3, #24
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	071b      	lsls	r3, r3, #28
 800261c:	4957      	ldr	r1, [pc, #348]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002642:	2b00      	cmp	r3, #0
 8002644:	d02e      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264e:	d129      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002650:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002664:	0f1b      	lsrs	r3, r3, #28
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	019a      	lsls	r2, r3, #6
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	041b      	lsls	r3, r3, #16
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	431a      	orrs	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	071b      	lsls	r3, r3, #28
 8002684:	493d      	ldr	r1, [pc, #244]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800268e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002692:	f023 021f 	bic.w	r2, r3, #31
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	3b01      	subs	r3, #1
 800269c:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01d      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b6:	0e1b      	lsrs	r3, r3, #24
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026be:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c4:	0f1b      	lsrs	r3, r3, #28
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	019a      	lsls	r2, r3, #6
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	431a      	orrs	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	071b      	lsls	r3, r3, #28
 80026e4:	4925      	ldr	r1, [pc, #148]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d011      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	019a      	lsls	r2, r3, #6
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	071b      	lsls	r3, r3, #28
 8002714:	4919      	ldr	r1, [pc, #100]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fbb0 	bl	8000e8c <HAL_GetTick>
 800272c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002730:	f7fe fbac 	bl	8000e8c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0d7      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b01      	cmp	r3, #1
 8002752:	f040 80cd 	bne.w	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002762:	f7fe fb93 	bl	8000e8c <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800276a:	f7fe fb8f 	bl	8000e8c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d903      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0ba      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800277c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002780:	4b5e      	ldr	r3, [pc, #376]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278c:	d0ed      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02e      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d12a      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027b6:	4b51      	ldr	r3, [pc, #324]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027c4:	4b4d      	ldr	r3, [pc, #308]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	0f1b      	lsrs	r3, r3, #28
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	019a      	lsls	r2, r3, #6
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	431a      	orrs	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	071b      	lsls	r3, r3, #28
 80027ea:	4944      	ldr	r1, [pc, #272]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027f2:	4b42      	ldr	r3, [pc, #264]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	3b01      	subs	r3, #1
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	493d      	ldr	r1, [pc, #244]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d022      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800281c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002820:	d11d      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	0e1b      	lsrs	r3, r3, #24
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	0f1b      	lsrs	r3, r3, #28
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	019a      	lsls	r2, r3, #6
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	431a      	orrs	r2, r3
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	431a      	orrs	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	071b      	lsls	r3, r3, #28
 8002856:	4929      	ldr	r1, [pc, #164]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d028      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	0e1b      	lsrs	r3, r3, #24
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	0c1b      	lsrs	r3, r3, #16
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	019a      	lsls	r2, r3, #6
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	431a      	orrs	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	071b      	lsls	r3, r3, #28
 800289e:	4917      	ldr	r1, [pc, #92]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	4911      	ldr	r1, [pc, #68]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c8:	f7fe fae0 	bl	8000e8c <HAL_GetTick>
 80028cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028d0:	f7fe fadc 	bl	8000e8c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e007      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ee:	d1ef      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e049      	b.n	80029a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f841 	bl	80029ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f000 fa00 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d001      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e054      	b.n	8002a86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <HAL_TIM_Base_Start_IT+0xd0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d022      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d01d      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d018      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d013      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00e      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xe0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_TIM_Base_Start_IT+0xe8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d115      	bne.n	8002a70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xec>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d015      	beq.n	8002a82 <HAL_TIM_Base_Start_IT+0xbe>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d011      	beq.n	8002a82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	e008      	b.n	8002a82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e000      	b.n	8002a84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	40014000 	.word	0x40014000
 8002aac:	40001800 	.word	0x40001800
 8002ab0:	00010007 	.word	0x00010007

08002ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0202 	mvn.w	r2, #2
 8002ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f905 	bl	8002d06 <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8f7 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f908 	bl	8002d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0204 	mvn.w	r2, #4
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8db 	bl	8002d06 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8cd 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f8de 	bl	8002d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d122      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0208 	mvn.w	r2, #8
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8b1 	bl	8002d06 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8a3 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8b4 	bl	8002d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d122      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d11b      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0210 	mvn.w	r2, #16
 8002bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2208      	movs	r2, #8
 8002be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f887 	bl	8002d06 <HAL_TIM_IC_CaptureCallback>
 8002bf8:	e005      	b.n	8002c06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f879 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f88a 	bl	8002d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0201 	mvn.w	r2, #1
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fef0 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b80      	cmp	r3, #128	; 0x80
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d107      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f91a 	bl	8002e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c72:	d10e      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f90d 	bl	8002eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d10e      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f838 	bl	8002d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d10e      	bne.n	8002cea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d107      	bne.n	8002cea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0220 	mvn.w	r2, #32
 8002ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8cd 	bl	8002e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a40      	ldr	r2, [pc, #256]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d62:	d00f      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <TIM_Base_SetConfig+0x118>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00b      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3c      	ldr	r2, [pc, #240]	; (8002e60 <TIM_Base_SetConfig+0x11c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <TIM_Base_SetConfig+0x120>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d108      	bne.n	8002d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2f      	ldr	r2, [pc, #188]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d027      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <TIM_Base_SetConfig+0x118>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d023      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <TIM_Base_SetConfig+0x11c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <TIM_Base_SetConfig+0x120>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d017      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <TIM_Base_SetConfig+0x128>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <TIM_Base_SetConfig+0x12c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00f      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <TIM_Base_SetConfig+0x130>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <TIM_Base_SetConfig+0x134>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <TIM_Base_SetConfig+0x138>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <TIM_Base_SetConfig+0x13c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d108      	bne.n	8002e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0xf8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	615a      	str	r2, [r3, #20]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40010400 	.word	0x40010400
 8002e6c:	40014000 	.word	0x40014000
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800
 8002e78:	40001800 	.word	0x40001800
 8002e7c:	40001c00 	.word	0x40001c00
 8002e80:	40002000 	.word	0x40002000

08002e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e040      	b.n	8002f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fdd6 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f82c 	bl	8002f5c <UART_SetConfig>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e022      	b.n	8002f54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa80 	bl	800341c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fb07 	bl	8003560 <UART_CheckIdleState>
 8002f52:	4603      	mov	r3, r0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4bb1      	ldr	r3, [pc, #708]	; (800324c <UART_SetConfig+0x2f0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	6979      	ldr	r1, [r7, #20]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a9f      	ldr	r2, [pc, #636]	; (8003250 <UART_SetConfig+0x2f4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d121      	bne.n	800301c <UART_SetConfig+0xc0>
 8002fd8:	4b9e      	ldr	r3, [pc, #632]	; (8003254 <UART_SetConfig+0x2f8>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d816      	bhi.n	8003014 <UART_SetConfig+0xb8>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <UART_SetConfig+0x90>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	08003009 	.word	0x08003009
 8002ff4:	08003003 	.word	0x08003003
 8002ff8:	0800300f 	.word	0x0800300f
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e151      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003002:	2302      	movs	r3, #2
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e14e      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003008:	2304      	movs	r3, #4
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e14b      	b.n	80032a6 <UART_SetConfig+0x34a>
 800300e:	2308      	movs	r3, #8
 8003010:	77fb      	strb	r3, [r7, #31]
 8003012:	e148      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003014:	2310      	movs	r3, #16
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	bf00      	nop
 800301a:	e144      	b.n	80032a6 <UART_SetConfig+0x34a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a8d      	ldr	r2, [pc, #564]	; (8003258 <UART_SetConfig+0x2fc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d134      	bne.n	8003090 <UART_SetConfig+0x134>
 8003026:	4b8b      	ldr	r3, [pc, #556]	; (8003254 <UART_SetConfig+0x2f8>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d829      	bhi.n	8003088 <UART_SetConfig+0x12c>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <UART_SetConfig+0xe0>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	08003071 	.word	0x08003071
 8003040:	08003089 	.word	0x08003089
 8003044:	08003089 	.word	0x08003089
 8003048:	08003089 	.word	0x08003089
 800304c:	0800307d 	.word	0x0800307d
 8003050:	08003089 	.word	0x08003089
 8003054:	08003089 	.word	0x08003089
 8003058:	08003089 	.word	0x08003089
 800305c:	08003077 	.word	0x08003077
 8003060:	08003089 	.word	0x08003089
 8003064:	08003089 	.word	0x08003089
 8003068:	08003089 	.word	0x08003089
 800306c:	08003083 	.word	0x08003083
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e117      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003076:	2302      	movs	r3, #2
 8003078:	77fb      	strb	r3, [r7, #31]
 800307a:	e114      	b.n	80032a6 <UART_SetConfig+0x34a>
 800307c:	2304      	movs	r3, #4
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e111      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003082:	2308      	movs	r3, #8
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e10e      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003088:	2310      	movs	r3, #16
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	bf00      	nop
 800308e:	e10a      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a71      	ldr	r2, [pc, #452]	; (800325c <UART_SetConfig+0x300>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d120      	bne.n	80030dc <UART_SetConfig+0x180>
 800309a:	4b6e      	ldr	r3, [pc, #440]	; (8003254 <UART_SetConfig+0x2f8>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d00f      	beq.n	80030c8 <UART_SetConfig+0x16c>
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d802      	bhi.n	80030b2 <UART_SetConfig+0x156>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <UART_SetConfig+0x160>
 80030b0:	e010      	b.n	80030d4 <UART_SetConfig+0x178>
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d005      	beq.n	80030c2 <UART_SetConfig+0x166>
 80030b6:	2b30      	cmp	r3, #48	; 0x30
 80030b8:	d009      	beq.n	80030ce <UART_SetConfig+0x172>
 80030ba:	e00b      	b.n	80030d4 <UART_SetConfig+0x178>
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e0f1      	b.n	80032a6 <UART_SetConfig+0x34a>
 80030c2:	2302      	movs	r3, #2
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e0ee      	b.n	80032a6 <UART_SetConfig+0x34a>
 80030c8:	2304      	movs	r3, #4
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e0eb      	b.n	80032a6 <UART_SetConfig+0x34a>
 80030ce:	2308      	movs	r3, #8
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e0e8      	b.n	80032a6 <UART_SetConfig+0x34a>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	bf00      	nop
 80030da:	e0e4      	b.n	80032a6 <UART_SetConfig+0x34a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5f      	ldr	r2, [pc, #380]	; (8003260 <UART_SetConfig+0x304>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d120      	bne.n	8003128 <UART_SetConfig+0x1cc>
 80030e6:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <UART_SetConfig+0x2f8>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d00f      	beq.n	8003114 <UART_SetConfig+0x1b8>
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d802      	bhi.n	80030fe <UART_SetConfig+0x1a2>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <UART_SetConfig+0x1ac>
 80030fc:	e010      	b.n	8003120 <UART_SetConfig+0x1c4>
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d005      	beq.n	800310e <UART_SetConfig+0x1b2>
 8003102:	2bc0      	cmp	r3, #192	; 0xc0
 8003104:	d009      	beq.n	800311a <UART_SetConfig+0x1be>
 8003106:	e00b      	b.n	8003120 <UART_SetConfig+0x1c4>
 8003108:	2300      	movs	r3, #0
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e0cb      	b.n	80032a6 <UART_SetConfig+0x34a>
 800310e:	2302      	movs	r3, #2
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e0c8      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003114:	2304      	movs	r3, #4
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e0c5      	b.n	80032a6 <UART_SetConfig+0x34a>
 800311a:	2308      	movs	r3, #8
 800311c:	77fb      	strb	r3, [r7, #31]
 800311e:	e0c2      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003120:	2310      	movs	r3, #16
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	bf00      	nop
 8003126:	e0be      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a4d      	ldr	r2, [pc, #308]	; (8003264 <UART_SetConfig+0x308>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d124      	bne.n	800317c <UART_SetConfig+0x220>
 8003132:	4b48      	ldr	r3, [pc, #288]	; (8003254 <UART_SetConfig+0x2f8>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003140:	d012      	beq.n	8003168 <UART_SetConfig+0x20c>
 8003142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003146:	d802      	bhi.n	800314e <UART_SetConfig+0x1f2>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <UART_SetConfig+0x200>
 800314c:	e012      	b.n	8003174 <UART_SetConfig+0x218>
 800314e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003152:	d006      	beq.n	8003162 <UART_SetConfig+0x206>
 8003154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003158:	d009      	beq.n	800316e <UART_SetConfig+0x212>
 800315a:	e00b      	b.n	8003174 <UART_SetConfig+0x218>
 800315c:	2300      	movs	r3, #0
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e0a1      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003162:	2302      	movs	r3, #2
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e09e      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003168:	2304      	movs	r3, #4
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e09b      	b.n	80032a6 <UART_SetConfig+0x34a>
 800316e:	2308      	movs	r3, #8
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e098      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003174:	2310      	movs	r3, #16
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	bf00      	nop
 800317a:	e094      	b.n	80032a6 <UART_SetConfig+0x34a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a39      	ldr	r2, [pc, #228]	; (8003268 <UART_SetConfig+0x30c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d124      	bne.n	80031d0 <UART_SetConfig+0x274>
 8003186:	4b33      	ldr	r3, [pc, #204]	; (8003254 <UART_SetConfig+0x2f8>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003194:	d012      	beq.n	80031bc <UART_SetConfig+0x260>
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d802      	bhi.n	80031a2 <UART_SetConfig+0x246>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <UART_SetConfig+0x254>
 80031a0:	e012      	b.n	80031c8 <UART_SetConfig+0x26c>
 80031a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a6:	d006      	beq.n	80031b6 <UART_SetConfig+0x25a>
 80031a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ac:	d009      	beq.n	80031c2 <UART_SetConfig+0x266>
 80031ae:	e00b      	b.n	80031c8 <UART_SetConfig+0x26c>
 80031b0:	2301      	movs	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e077      	b.n	80032a6 <UART_SetConfig+0x34a>
 80031b6:	2302      	movs	r3, #2
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e074      	b.n	80032a6 <UART_SetConfig+0x34a>
 80031bc:	2304      	movs	r3, #4
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e071      	b.n	80032a6 <UART_SetConfig+0x34a>
 80031c2:	2308      	movs	r3, #8
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e06e      	b.n	80032a6 <UART_SetConfig+0x34a>
 80031c8:	2310      	movs	r3, #16
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	bf00      	nop
 80031ce:	e06a      	b.n	80032a6 <UART_SetConfig+0x34a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a25      	ldr	r2, [pc, #148]	; (800326c <UART_SetConfig+0x310>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d124      	bne.n	8003224 <UART_SetConfig+0x2c8>
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <UART_SetConfig+0x2f8>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e8:	d012      	beq.n	8003210 <UART_SetConfig+0x2b4>
 80031ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ee:	d802      	bhi.n	80031f6 <UART_SetConfig+0x29a>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <UART_SetConfig+0x2a8>
 80031f4:	e012      	b.n	800321c <UART_SetConfig+0x2c0>
 80031f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fa:	d006      	beq.n	800320a <UART_SetConfig+0x2ae>
 80031fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003200:	d009      	beq.n	8003216 <UART_SetConfig+0x2ba>
 8003202:	e00b      	b.n	800321c <UART_SetConfig+0x2c0>
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e04d      	b.n	80032a6 <UART_SetConfig+0x34a>
 800320a:	2302      	movs	r3, #2
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e04a      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003210:	2304      	movs	r3, #4
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e047      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003216:	2308      	movs	r3, #8
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e044      	b.n	80032a6 <UART_SetConfig+0x34a>
 800321c:	2310      	movs	r3, #16
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	bf00      	nop
 8003222:	e040      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a11      	ldr	r2, [pc, #68]	; (8003270 <UART_SetConfig+0x314>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d139      	bne.n	80032a2 <UART_SetConfig+0x346>
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <UART_SetConfig+0x2f8>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800323c:	d027      	beq.n	800328e <UART_SetConfig+0x332>
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003242:	d817      	bhi.n	8003274 <UART_SetConfig+0x318>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01c      	beq.n	8003282 <UART_SetConfig+0x326>
 8003248:	e027      	b.n	800329a <UART_SetConfig+0x33e>
 800324a:	bf00      	nop
 800324c:	efff69f3 	.word	0xefff69f3
 8003250:	40011000 	.word	0x40011000
 8003254:	40023800 	.word	0x40023800
 8003258:	40004400 	.word	0x40004400
 800325c:	40004800 	.word	0x40004800
 8003260:	40004c00 	.word	0x40004c00
 8003264:	40005000 	.word	0x40005000
 8003268:	40011400 	.word	0x40011400
 800326c:	40007800 	.word	0x40007800
 8003270:	40007c00 	.word	0x40007c00
 8003274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003278:	d006      	beq.n	8003288 <UART_SetConfig+0x32c>
 800327a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800327e:	d009      	beq.n	8003294 <UART_SetConfig+0x338>
 8003280:	e00b      	b.n	800329a <UART_SetConfig+0x33e>
 8003282:	2300      	movs	r3, #0
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e00e      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003288:	2302      	movs	r3, #2
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e00b      	b.n	80032a6 <UART_SetConfig+0x34a>
 800328e:	2304      	movs	r3, #4
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e008      	b.n	80032a6 <UART_SetConfig+0x34a>
 8003294:	2308      	movs	r3, #8
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e005      	b.n	80032a6 <UART_SetConfig+0x34a>
 800329a:	2310      	movs	r3, #16
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	bf00      	nop
 80032a0:	e001      	b.n	80032a6 <UART_SetConfig+0x34a>
 80032a2:	2310      	movs	r3, #16
 80032a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ae:	d15b      	bne.n	8003368 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80032b0:	7ffb      	ldrb	r3, [r7, #31]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d827      	bhi.n	8003306 <UART_SetConfig+0x3aa>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <UART_SetConfig+0x360>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032e1 	.word	0x080032e1
 80032c0:	080032e9 	.word	0x080032e9
 80032c4:	080032f1 	.word	0x080032f1
 80032c8:	08003307 	.word	0x08003307
 80032cc:	080032f7 	.word	0x080032f7
 80032d0:	08003307 	.word	0x08003307
 80032d4:	08003307 	.word	0x08003307
 80032d8:	08003307 	.word	0x08003307
 80032dc:	080032ff 	.word	0x080032ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7fe fec4 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 80032e4:	61b8      	str	r0, [r7, #24]
        break;
 80032e6:	e013      	b.n	8003310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e8:	f7fe fed4 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 80032ec:	61b8      	str	r0, [r7, #24]
        break;
 80032ee:	e00f      	b.n	8003310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b49      	ldr	r3, [pc, #292]	; (8003418 <UART_SetConfig+0x4bc>)
 80032f2:	61bb      	str	r3, [r7, #24]
        break;
 80032f4:	e00c      	b.n	8003310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f6:	f7fe fdd5 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 80032fa:	61b8      	str	r0, [r7, #24]
        break;
 80032fc:	e008      	b.n	8003310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003302:	61bb      	str	r3, [r7, #24]
        break;
 8003304:	e004      	b.n	8003310 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	77bb      	strb	r3, [r7, #30]
        break;
 800330e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d074      	beq.n	8003400 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	005a      	lsls	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d916      	bls.n	8003362 <UART_SetConfig+0x406>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333a:	d212      	bcs.n	8003362 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b29b      	uxth	r3, r3
 8003340:	f023 030f 	bic.w	r3, r3, #15
 8003344:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	b29b      	uxth	r3, r3
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	b29a      	uxth	r2, r3
 8003352:	89fb      	ldrh	r3, [r7, #14]
 8003354:	4313      	orrs	r3, r2
 8003356:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	89fa      	ldrh	r2, [r7, #14]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	e04e      	b.n	8003400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	77bb      	strb	r3, [r7, #30]
 8003366:	e04b      	b.n	8003400 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003368:	7ffb      	ldrb	r3, [r7, #31]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d827      	bhi.n	80033be <UART_SetConfig+0x462>
 800336e:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <UART_SetConfig+0x418>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	08003399 	.word	0x08003399
 8003378:	080033a1 	.word	0x080033a1
 800337c:	080033a9 	.word	0x080033a9
 8003380:	080033bf 	.word	0x080033bf
 8003384:	080033af 	.word	0x080033af
 8003388:	080033bf 	.word	0x080033bf
 800338c:	080033bf 	.word	0x080033bf
 8003390:	080033bf 	.word	0x080033bf
 8003394:	080033b7 	.word	0x080033b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003398:	f7fe fe68 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 800339c:	61b8      	str	r0, [r7, #24]
        break;
 800339e:	e013      	b.n	80033c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a0:	f7fe fe78 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 80033a4:	61b8      	str	r0, [r7, #24]
        break;
 80033a6:	e00f      	b.n	80033c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <UART_SetConfig+0x4bc>)
 80033aa:	61bb      	str	r3, [r7, #24]
        break;
 80033ac:	e00c      	b.n	80033c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ae:	f7fe fd79 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 80033b2:	61b8      	str	r0, [r7, #24]
        break;
 80033b4:	e008      	b.n	80033c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	61bb      	str	r3, [r7, #24]
        break;
 80033bc:	e004      	b.n	80033c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	77bb      	strb	r3, [r7, #30]
        break;
 80033c6:	bf00      	nop
    }

    if (pclk != 0U)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d018      	beq.n	8003400 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	085a      	lsrs	r2, r3, #1
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	441a      	add	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	d908      	bls.n	80033fc <UART_SetConfig+0x4a0>
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d204      	bcs.n	80033fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e001      	b.n	8003400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800340c:	7fbb      	ldrb	r3, [r7, #30]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	00f42400 	.word	0x00f42400

0800341c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01a      	beq.n	8003532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351a:	d10a      	bne.n	8003532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  }
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003570:	f7fd fc8c 	bl	8000e8c <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d10e      	bne.n	80035a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f817 	bl	80035c6 <UART_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e00d      	b.n	80035be <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d6:	e05e      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d05a      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7fd fc54 	bl	8000e8c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11b      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003604:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e043      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02c      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364a:	d124      	bne.n	8003696 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003664:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e00f      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d091      	beq.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036c0:	b084      	sub	sp, #16
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	f107 001c 	add.w	r0, r7, #28
 80036ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d120      	bne.n	800371a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <USB_CoreInit+0xac>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fa5a 	bl	8003bc8 <USB_CoreReset>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e010      	b.n	800373c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa4e 	bl	8003bc8 <USB_CoreReset>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10b      	bne.n	800375a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f043 0206 	orr.w	r2, r3, #6
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003766:	b004      	add	sp, #16
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	ffbdffbf 	.word	0xffbdffbf

08003770 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 0201 	bic.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e00b      	b.n	80037d6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]
 80037d0:	e001      	b.n	80037d6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e003      	b.n	80037de <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80037d6:	2032      	movs	r0, #50	; 0x32
 80037d8:	f7fd fb64 	bl	8000ea4 <HAL_Delay>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037e8:	b084      	sub	sp, #16
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	e009      	b.n	800381c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3340      	adds	r3, #64	; 0x40
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	2200      	movs	r2, #0
 8003814:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3301      	adds	r3, #1
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b0e      	cmp	r3, #14
 8003820:	d9f2      	bls.n	8003808 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11c      	bne.n	8003862 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003836:	f043 0302 	orr.w	r3, r3, #2
 800383a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e005      	b.n	800386e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003874:	461a      	mov	r2, r3
 8003876:	2300      	movs	r3, #0
 8003878:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003880:	4619      	mov	r1, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003888:	461a      	mov	r2, r3
 800388a:	680b      	ldr	r3, [r1, #0]
 800388c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	2b01      	cmp	r3, #1
 8003892:	d10c      	bne.n	80038ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800389a:	2100      	movs	r1, #0
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f959 	bl	8003b54 <USB_SetDevSpeed>
 80038a2:	e018      	b.n	80038d6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038a4:	2101      	movs	r1, #1
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f954 	bl	8003b54 <USB_SetDevSpeed>
 80038ac:	e013      	b.n	80038d6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d10c      	bne.n	80038ce <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038ba:	2100      	movs	r1, #0
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f949 	bl	8003b54 <USB_SetDevSpeed>
 80038c2:	e008      	b.n	80038d6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038c4:	2101      	movs	r1, #1
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f944 	bl	8003b54 <USB_SetDevSpeed>
 80038cc:	e003      	b.n	80038d6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038ce:	2103      	movs	r1, #3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f93f 	bl	8003b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038d6:	2110      	movs	r1, #16
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f8f3 	bl	8003ac4 <USB_FlushTxFifo>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f911 	bl	8003b10 <USB_FlushRxFifo>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fe:	461a      	mov	r2, r3
 8003900:	2300      	movs	r3, #0
 8003902:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	461a      	mov	r2, r3
 800390c:	2300      	movs	r3, #0
 800390e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e043      	b.n	80039aa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003938:	d118      	bne.n	800396c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394c:	461a      	mov	r2, r3
 800394e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e013      	b.n	800397e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003962:	461a      	mov	r2, r3
 8003964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e008      	b.n	800397e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003978:	461a      	mov	r2, r3
 800397a:	2300      	movs	r3, #0
 800397c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	461a      	mov	r2, r3
 800398c:	2300      	movs	r3, #0
 800398e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399c:	461a      	mov	r2, r3
 800399e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	3301      	adds	r3, #1
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3b7      	bcc.n	8003922 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	e043      	b.n	8003a40 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ce:	d118      	bne.n	8003a02 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e2:	461a      	mov	r2, r3
 80039e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e013      	b.n	8003a14 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e008      	b.n	8003a14 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2300      	movs	r3, #0
 8003a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a32:	461a      	mov	r2, r3
 8003a34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d3b7      	bcc.n	80039b8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f043 0210 	orr.w	r2, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <USB_DevInit+0x2d4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f043 0208 	orr.w	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <USB_DevInit+0x2d8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ab8:	b004      	add	sp, #16
 8003aba:	4770      	bx	lr
 8003abc:	803c3800 	.word	0x803c3800
 8003ac0:	40000004 	.word	0x40000004

08003ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	019b      	lsls	r3, r3, #6
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <USB_FlushTxFifo+0x48>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e006      	b.n	8003afe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d0f0      	beq.n	8003ade <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	00030d40 	.word	0x00030d40

08003b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2210      	movs	r2, #16
 8003b20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3301      	adds	r3, #1
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <USB_FlushRxFifo+0x40>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e006      	b.n	8003b42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d0f0      	beq.n	8003b22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	00030d40 	.word	0x00030d40

08003b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003ba0:	f023 0303 	bic.w	r3, r3, #3
 8003ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <USB_CoreReset+0x64>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e01b      	b.n	8003c1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	daf2      	bge.n	8003bd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3301      	adds	r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a09      	ldr	r2, [pc, #36]	; (8003c2c <USB_CoreReset+0x64>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e006      	b.n	8003c1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d0f0      	beq.n	8003bfe <USB_CoreReset+0x36>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	00030d40 	.word	0x00030d40

08003c30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c46:	f3ef 8305 	mrs	r3, IPSR
 8003c4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c52:	f3ef 8310 	mrs	r3, PRIMASK
 8003c56:	607b      	str	r3, [r7, #4]
  return(result);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c62:	603b      	str	r3, [r7, #0]
  return(result);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <osKernelInitialize+0x3a>
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <osKernelInitialize+0x64>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d103      	bne.n	8003c7a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003c72:	f06f 0305 	mvn.w	r3, #5
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e00c      	b.n	8003c94 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <osKernelInitialize+0x64>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <osKernelInitialize+0x64>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e002      	b.n	8003c94 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c94:	68fb      	ldr	r3, [r7, #12]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000094 	.word	0x20000094

08003ca8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cae:	f3ef 8305 	mrs	r3, IPSR
 8003cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cba:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbe:	607b      	str	r3, [r7, #4]
  return(result);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8003cca:	603b      	str	r3, [r7, #0]
  return(result);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <osKernelStart+0x3a>
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <osKernelStart+0x68>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d103      	bne.n	8003ce2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003cda:	f06f 0305 	mvn.w	r3, #5
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e010      	b.n	8003d04 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <osKernelStart+0x68>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d109      	bne.n	8003cfe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cea:	f7ff ffa1 	bl	8003c30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <osKernelStart+0x68>)
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003cf4:	f001 f910 	bl	8004f18 <vTaskStartScheduler>
      stat = osOK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e002      	b.n	8003d04 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003d02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d04:	68fb      	ldr	r3, [r7, #12]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000094 	.word	0x20000094

08003d14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b090      	sub	sp, #64	; 0x40
 8003d18:	af04      	add	r7, sp, #16
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d24:	f3ef 8305 	mrs	r3, IPSR
 8003d28:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d2a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 808f 	bne.w	8003e50 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d42:	617b      	str	r3, [r7, #20]
  return(result);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <osThreadNew+0x3e>
 8003d4a:	4b44      	ldr	r3, [pc, #272]	; (8003e5c <osThreadNew+0x148>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d07e      	beq.n	8003e50 <osThreadNew+0x13c>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d07b      	beq.n	8003e50 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003d5c:	2318      	movs	r3, #24
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
 8003d68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d045      	beq.n	8003dfc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <osThreadNew+0x6a>
        name = attr->name;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <osThreadNew+0x90>
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	2b38      	cmp	r3, #56	; 0x38
 8003d96:	d805      	bhi.n	8003da4 <osThreadNew+0x90>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <osThreadNew+0x94>
        return (NULL);
 8003da4:	2300      	movs	r3, #0
 8003da6:	e054      	b.n	8003e52 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <osThreadNew+0xca>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b5b      	cmp	r3, #91	; 0x5b
 8003dc6:	d90a      	bls.n	8003dde <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d006      	beq.n	8003dde <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <osThreadNew+0xca>
        mem = 1;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	e010      	b.n	8003e00 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10c      	bne.n	8003e00 <osThreadNew+0xec>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <osThreadNew+0xec>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <osThreadNew+0xec>
          mem = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	623b      	str	r3, [r7, #32]
 8003dfa:	e001      	b.n	8003e00 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d110      	bne.n	8003e28 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e0e:	9202      	str	r2, [sp, #8]
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fe2b 	bl	8004a78 <xTaskCreateStatic>
 8003e22:	4603      	mov	r3, r0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	e013      	b.n	8003e50 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d110      	bne.n	8003e50 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	f107 0310 	add.w	r3, r7, #16
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fe79 	bl	8004b38 <xTaskCreate>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d001      	beq.n	8003e50 <osThreadNew+0x13c>
          hTask = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e50:	693b      	ldr	r3, [r7, #16]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3730      	adds	r7, #48	; 0x30
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000094 	.word	0x20000094

08003e60 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e68:	f3ef 8305 	mrs	r3, IPSR
 8003e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8003e6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e74:	f3ef 8310 	mrs	r3, PRIMASK
 8003e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e80:	f3ef 8311 	mrs	r3, BASEPRI
 8003e84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <osDelay+0x3c>
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <osDelay+0x58>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d103      	bne.n	8003e9c <osDelay+0x3c>
    stat = osErrorISR;
 8003e94:	f06f 0305 	mvn.w	r3, #5
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e007      	b.n	8003eac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <osDelay+0x4c>
      vTaskDelay(ticks);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f001 f800 	bl	8004eac <vTaskDelay>
    }
  }

  return (stat);
 8003eac:	697b      	ldr	r3, [r7, #20]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000094 	.word	0x20000094

08003ebc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a06      	ldr	r2, [pc, #24]	; (8003eec <vApplicationGetIdleTaskMemory+0x30>)
 8003ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	601a      	str	r2, [r3, #0]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000098 	.word	0x20000098
 8003eec:	200000f4 	.word	0x200000f4

08003ef0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <vApplicationGetTimerTaskMemory+0x2c>)
 8003f00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4a06      	ldr	r2, [pc, #24]	; (8003f20 <vApplicationGetTimerTaskMemory+0x30>)
 8003f06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f0e:	601a      	str	r2, [r3, #0]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	200002f4 	.word	0x200002f4
 8003f20:	20000350 	.word	0x20000350

08003f24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f103 0208 	add.w	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f103 0208 	add.w	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f103 0208 	add.w	r2, r3, #8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d103      	bne.n	8003fe6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e00c      	b.n	8004000 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e002      	b.n	8003ff4 <vListInsert+0x2e>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d2f6      	bcs.n	8003fee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	601a      	str	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6892      	ldr	r2, [r2, #8]
 800404e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6852      	ldr	r2, [r2, #4]
 8004058:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d103      	bne.n	800406c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1e5a      	subs	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	b672      	cpsid	i
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	b662      	cpsie	i
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	e7fe      	b.n	80040b6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80040b8:	f002 f8b6 	bl	8006228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	441a      	add	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	3b01      	subs	r3, #1
 80040ea:	68f9      	ldr	r1, [r7, #12]
 80040ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	441a      	add	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	22ff      	movs	r2, #255	; 0xff
 80040fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	22ff      	movs	r2, #255	; 0xff
 8004104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d114      	bne.n	8004138 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01a      	beq.n	800414c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3310      	adds	r3, #16
 800411a:	4618      	mov	r0, r3
 800411c:	f001 f98a 	bl	8005434 <xTaskRemoveFromEventList>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d012      	beq.n	800414c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <xQueueGenericReset+0xd0>)
 8004128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	e009      	b.n	800414c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3310      	adds	r3, #16
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fef1 	bl	8003f24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3324      	adds	r3, #36	; 0x24
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff feec 	bl	8003f24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800414c:	f002 f89e 	bl	800628c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004150:	2301      	movs	r3, #1
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08e      	sub	sp, #56	; 0x38
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <xQueueGenericCreateStatic+0x2c>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	b672      	cpsid	i
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	b662      	cpsie	i
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
 800418a:	e7fe      	b.n	800418a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <xQueueGenericCreateStatic+0x4a>
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	b672      	cpsid	i
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	b662      	cpsie	i
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	e7fe      	b.n	80041a8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <xQueueGenericCreateStatic+0x56>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <xQueueGenericCreateStatic+0x5a>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <xQueueGenericCreateStatic+0x5c>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xQueueGenericCreateStatic+0x78>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	b672      	cpsid	i
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	b662      	cpsie	i
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	e7fe      	b.n	80041d6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <xQueueGenericCreateStatic+0x84>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <xQueueGenericCreateStatic+0x88>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <xQueueGenericCreateStatic+0x8a>
 80041e8:	2300      	movs	r3, #0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <xQueueGenericCreateStatic+0xa6>
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	b672      	cpsid	i
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	b662      	cpsie	i
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	e7fe      	b.n	8004204 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004206:	2350      	movs	r3, #80	; 0x50
 8004208:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b50      	cmp	r3, #80	; 0x50
 800420e:	d00b      	beq.n	8004228 <xQueueGenericCreateStatic+0xc8>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	b672      	cpsid	i
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	b662      	cpsie	i
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	e7fe      	b.n	8004226 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004228:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00d      	beq.n	8004250 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800423c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f805 	bl	800425a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004252:	4618      	mov	r0, r3
 8004254:	3730      	adds	r7, #48	; 0x30
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d103      	bne.n	8004276 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e002      	b.n	800427c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004288:	2101      	movs	r1, #1
 800428a:	69b8      	ldr	r0, [r7, #24]
 800428c:	f7ff fefe 	bl	800408c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08e      	sub	sp, #56	; 0x38
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042ae:	2300      	movs	r3, #0
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10b      	bne.n	80042d4 <xQueueGenericSend+0x34>
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	b672      	cpsid	i
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	b662      	cpsie	i
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d2:	e7fe      	b.n	80042d2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <xQueueGenericSend+0x42>
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <xQueueGenericSend+0x46>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <xQueueGenericSend+0x48>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <xQueueGenericSend+0x64>
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	b672      	cpsid	i
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	b662      	cpsie	i
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	e7fe      	b.n	8004302 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d103      	bne.n	8004312 <xQueueGenericSend+0x72>
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <xQueueGenericSend+0x76>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <xQueueGenericSend+0x78>
 8004316:	2300      	movs	r3, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10b      	bne.n	8004334 <xQueueGenericSend+0x94>
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	b672      	cpsid	i
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	b662      	cpsie	i
 8004330:	623b      	str	r3, [r7, #32]
 8004332:	e7fe      	b.n	8004332 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004334:	f001 fa3c 	bl	80057b0 <xTaskGetSchedulerState>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <xQueueGenericSend+0xa4>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <xQueueGenericSend+0xa8>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <xQueueGenericSend+0xaa>
 8004348:	2300      	movs	r3, #0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <xQueueGenericSend+0xc6>
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	b672      	cpsid	i
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	b662      	cpsie	i
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	e7fe      	b.n	8004364 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004366:	f001 ff5f 	bl	8006228 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <xQueueGenericSend+0xdc>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d129      	bne.n	80043d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004382:	f000 fa0d 	bl	80047a0 <prvCopyDataToQueue>
 8004386:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	3324      	adds	r3, #36	; 0x24
 8004394:	4618      	mov	r0, r3
 8004396:	f001 f84d 	bl	8005434 <xTaskRemoveFromEventList>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043a0:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <xQueueGenericSend+0x200>)
 80043a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	e00a      	b.n	80043c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043b8:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <xQueueGenericSend+0x200>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043c8:	f001 ff60 	bl	800628c <vPortExitCritical>
				return pdPASS;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e063      	b.n	8004498 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043d6:	f001 ff59 	bl	800628c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	e05c      	b.n	8004498 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 f887 	bl	80054fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043ee:	2301      	movs	r3, #1
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043f2:	f001 ff4b 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043f6:	f000 fdf7 	bl	8004fe8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043fa:	f001 ff15 	bl	8006228 <vPortEnterCritical>
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004404:	b25b      	sxtb	r3, r3
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d103      	bne.n	8004414 <xQueueGenericSend+0x174>
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800441a:	b25b      	sxtb	r3, r3
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d103      	bne.n	800442a <xQueueGenericSend+0x18a>
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800442a:	f001 ff2f 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800442e:	1d3a      	adds	r2, r7, #4
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4611      	mov	r1, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f876 	bl	8005528 <xTaskCheckForTimeOut>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d124      	bne.n	800448c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004444:	f000 faa4 	bl	8004990 <prvIsQueueFull>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d018      	beq.n	8004480 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	3310      	adds	r3, #16
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f000 ff9a 	bl	8005390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800445c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800445e:	f000 fa2f 	bl	80048c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004462:	f000 fdcf 	bl	8005004 <xTaskResumeAll>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	f47f af7c 	bne.w	8004366 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <xQueueGenericSend+0x200>)
 8004470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	e772      	b.n	8004366 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004482:	f000 fa1d 	bl	80048c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004486:	f000 fdbd 	bl	8005004 <xTaskResumeAll>
 800448a:	e76c      	b.n	8004366 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800448c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800448e:	f000 fa17 	bl	80048c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004492:	f000 fdb7 	bl	8005004 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004496:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004498:	4618      	mov	r0, r3
 800449a:	3738      	adds	r7, #56	; 0x38
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08e      	sub	sp, #56	; 0x38
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <xQueueGenericSendFromISR+0x30>
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	b672      	cpsid	i
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	b662      	cpsie	i
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
 80044d2:	e7fe      	b.n	80044d2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <xQueueGenericSendFromISR+0x3e>
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <xQueueGenericSendFromISR+0x42>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <xQueueGenericSendFromISR+0x44>
 80044e6:	2300      	movs	r3, #0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <xQueueGenericSendFromISR+0x60>
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	b672      	cpsid	i
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	b662      	cpsie	i
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	e7fe      	b.n	8004502 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d103      	bne.n	8004512 <xQueueGenericSendFromISR+0x6e>
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <xQueueGenericSendFromISR+0x72>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <xQueueGenericSendFromISR+0x74>
 8004516:	2300      	movs	r3, #0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <xQueueGenericSendFromISR+0x90>
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	b672      	cpsid	i
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	b662      	cpsie	i
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	e7fe      	b.n	8004532 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004534:	f001 ff58 	bl	80063e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004538:	f3ef 8211 	mrs	r2, BASEPRI
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	b672      	cpsid	i
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	b662      	cpsie	i
 8004550:	61ba      	str	r2, [r7, #24]
 8004552:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004554:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	429a      	cmp	r2, r3
 8004562:	d302      	bcc.n	800456a <xQueueGenericSendFromISR+0xc6>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d12c      	bne.n	80045c4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800457a:	f000 f911 	bl	80047a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800457e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d112      	bne.n	80045ae <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d016      	beq.n	80045be <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	3324      	adds	r3, #36	; 0x24
 8004594:	4618      	mov	r0, r3
 8004596:	f000 ff4d 	bl	8005434 <xTaskRemoveFromEventList>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e007      	b.n	80045be <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045b2:	3301      	adds	r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	b25a      	sxtb	r2, r3
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045be:	2301      	movs	r3, #1
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80045c2:	e001      	b.n	80045c8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3738      	adds	r7, #56	; 0x38
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08c      	sub	sp, #48	; 0x30
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <xQueueReceive+0x32>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	b672      	cpsid	i
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	b662      	cpsie	i
 800460a:	623b      	str	r3, [r7, #32]
 800460c:	e7fe      	b.n	800460c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d103      	bne.n	800461c <xQueueReceive+0x40>
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <xQueueReceive+0x44>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <xQueueReceive+0x46>
 8004620:	2300      	movs	r3, #0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <xQueueReceive+0x62>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	b672      	cpsid	i
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	b662      	cpsie	i
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e7fe      	b.n	800463c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800463e:	f001 f8b7 	bl	80057b0 <xTaskGetSchedulerState>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <xQueueReceive+0x72>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <xQueueReceive+0x76>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueReceive+0x78>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <xQueueReceive+0x94>
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	b672      	cpsid	i
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	b662      	cpsie	i
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e7fe      	b.n	800466e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004670:	f001 fdda 	bl	8006228 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01f      	beq.n	80046c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004684:	f000 f8f6 	bl	8004874 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1e5a      	subs	r2, r3, #1
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	3310      	adds	r3, #16
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fec9 	bl	8005434 <xTaskRemoveFromEventList>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046a8:	4b3c      	ldr	r3, [pc, #240]	; (800479c <xQueueReceive+0x1c0>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046b8:	f001 fde8 	bl	800628c <vPortExitCritical>
				return pdPASS;
 80046bc:	2301      	movs	r3, #1
 80046be:	e069      	b.n	8004794 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046c6:	f001 fde1 	bl	800628c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e062      	b.n	8004794 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046d4:	f107 0310 	add.w	r3, r7, #16
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 ff0f 	bl	80054fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046de:	2301      	movs	r3, #1
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046e2:	f001 fdd3 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046e6:	f000 fc7f 	bl	8004fe8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046ea:	f001 fd9d 	bl	8006228 <vPortEnterCritical>
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f4:	b25b      	sxtb	r3, r3
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d103      	bne.n	8004704 <xQueueReceive+0x128>
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800470a:	b25b      	sxtb	r3, r3
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d103      	bne.n	800471a <xQueueReceive+0x13e>
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800471a:	f001 fdb7 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800471e:	1d3a      	adds	r2, r7, #4
 8004720:	f107 0310 	add.w	r3, r7, #16
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fefe 	bl	8005528 <xTaskCheckForTimeOut>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d123      	bne.n	800477a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004734:	f000 f916 	bl	8004964 <prvIsQueueEmpty>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d017      	beq.n	800476e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	3324      	adds	r3, #36	; 0x24
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fe22 	bl	8005390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800474c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474e:	f000 f8b7 	bl	80048c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004752:	f000 fc57 	bl	8005004 <xTaskResumeAll>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d189      	bne.n	8004670 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <xQueueReceive+0x1c0>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	e780      	b.n	8004670 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800476e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004770:	f000 f8a6 	bl	80048c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004774:	f000 fc46 	bl	8005004 <xTaskResumeAll>
 8004778:	e77a      	b.n	8004670 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800477a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477c:	f000 f8a0 	bl	80048c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004780:	f000 fc40 	bl	8005004 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004786:	f000 f8ed 	bl	8004964 <prvIsQueueEmpty>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	f43f af6f 	beq.w	8004670 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004792:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004794:	4618      	mov	r0, r3
 8004796:	3730      	adds	r7, #48	; 0x30
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10d      	bne.n	80047da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d14d      	bne.n	8004862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 f80e 	bl	80057ec <xTaskPriorityDisinherit>
 80047d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	e043      	b.n	8004862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d119      	bne.n	8004814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6858      	ldr	r0, [r3, #4]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	461a      	mov	r2, r3
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	f002 f848 	bl	8006880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	441a      	add	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d32b      	bcc.n	8004862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	e026      	b.n	8004862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68d8      	ldr	r0, [r3, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	461a      	mov	r2, r3
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	f002 f82e 	bl	8006880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	425b      	negs	r3, r3
 800482e:	441a      	add	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d207      	bcs.n	8004850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	425b      	negs	r3, r3
 800484a:	441a      	add	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d105      	bne.n	8004862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	3b01      	subs	r3, #1
 8004860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800486a:	697b      	ldr	r3, [r7, #20]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d018      	beq.n	80048b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	441a      	add	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d303      	bcc.n	80048a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68d9      	ldr	r1, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	461a      	mov	r2, r3
 80048b2:	6838      	ldr	r0, [r7, #0]
 80048b4:	f001 ffe4 	bl	8006880 <memcpy>
	}
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048c8:	f001 fcae 	bl	8006228 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048d4:	e011      	b.n	80048fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d012      	beq.n	8004904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3324      	adds	r3, #36	; 0x24
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fda6 	bl	8005434 <xTaskRemoveFromEventList>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048ee:	f000 fe7f 	bl	80055f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	dce9      	bgt.n	80048d6 <prvUnlockQueue+0x16>
 8004902:	e000      	b.n	8004906 <prvUnlockQueue+0x46>
					break;
 8004904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	22ff      	movs	r2, #255	; 0xff
 800490a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800490e:	f001 fcbd 	bl	800628c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004912:	f001 fc89 	bl	8006228 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800491c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800491e:	e011      	b.n	8004944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d012      	beq.n	800494e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3310      	adds	r3, #16
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fd81 	bl	8005434 <xTaskRemoveFromEventList>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004938:	f000 fe5a 	bl	80055f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	3b01      	subs	r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004948:	2b00      	cmp	r3, #0
 800494a:	dce9      	bgt.n	8004920 <prvUnlockQueue+0x60>
 800494c:	e000      	b.n	8004950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800494e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	22ff      	movs	r2, #255	; 0xff
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004958:	f001 fc98 	bl	800628c <vPortExitCritical>
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800496c:	f001 fc5c 	bl	8006228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e001      	b.n	8004982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004982:	f001 fc83 	bl	800628c <vPortExitCritical>

	return xReturn;
 8004986:	68fb      	ldr	r3, [r7, #12]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004998:	f001 fc46 	bl	8006228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d102      	bne.n	80049ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049a8:	2301      	movs	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e001      	b.n	80049b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049b2:	f001 fc6b 	bl	800628c <vPortExitCritical>

	return xReturn;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e014      	b.n	80049fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049d0:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <vQueueAddToRegistry+0x4c>)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049dc:	490b      	ldr	r1, [pc, #44]	; (8004a0c <vQueueAddToRegistry+0x4c>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <vQueueAddToRegistry+0x4c>)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049f2:	e005      	b.n	8004a00 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3301      	adds	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b07      	cmp	r3, #7
 80049fe:	d9e7      	bls.n	80049d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	20004e84 	.word	0x20004e84

08004a10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a20:	f001 fc02 	bl	8006228 <vPortEnterCritical>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a2a:	b25b      	sxtb	r3, r3
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d103      	bne.n	8004a3a <vQueueWaitForMessageRestricted+0x2a>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a40:	b25b      	sxtb	r3, r3
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d103      	bne.n	8004a50 <vQueueWaitForMessageRestricted+0x40>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a50:	f001 fc1c 	bl	800628c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3324      	adds	r3, #36	; 0x24
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fcb9 	bl	80053dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f7ff ff28 	bl	80048c0 <prvUnlockQueue>
	}
 8004a70:	bf00      	nop
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af04      	add	r7, sp, #16
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <xTaskCreateStatic+0x2c>
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	b672      	cpsid	i
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	b662      	cpsie	i
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	e7fe      	b.n	8004aa2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <xTaskCreateStatic+0x4a>
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	b672      	cpsid	i
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	b662      	cpsie	i
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	e7fe      	b.n	8004ac0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ac2:	235c      	movs	r3, #92	; 0x5c
 8004ac4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b5c      	cmp	r3, #92	; 0x5c
 8004aca:	d00b      	beq.n	8004ae4 <xTaskCreateStatic+0x6c>
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	b672      	cpsid	i
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	b662      	cpsie	i
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	e7fe      	b.n	8004ae2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ae4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01e      	beq.n	8004b2a <xTaskCreateStatic+0xb2>
 8004aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01b      	beq.n	8004b2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b04:	2300      	movs	r3, #0
 8004b06:	9303      	str	r3, [sp, #12]
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	f107 0314 	add.w	r3, r7, #20
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f850 	bl	8004bc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b24:	f000 f8de 	bl	8004ce4 <prvAddNewTaskToReadyList>
 8004b28:	e001      	b.n	8004b2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b2e:	697b      	ldr	r3, [r7, #20]
	}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3728      	adds	r7, #40	; 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08c      	sub	sp, #48	; 0x30
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fc8d 	bl	800646c <pvPortMalloc>
 8004b52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00e      	beq.n	8004b78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b5a:	205c      	movs	r0, #92	; 0x5c
 8004b5c:	f001 fc86 	bl	800646c <pvPortMalloc>
 8004b60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004b6e:	e005      	b.n	8004b7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b70:	6978      	ldr	r0, [r7, #20]
 8004b72:	f001 fd43 	bl	80065fc <vPortFree>
 8004b76:	e001      	b.n	8004b7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d017      	beq.n	8004bb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9303      	str	r3, [sp, #12]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	9302      	str	r3, [sp, #8]
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f80e 	bl	8004bc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ba6:	69f8      	ldr	r0, [r7, #28]
 8004ba8:	f000 f89c 	bl	8004ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bac:	2301      	movs	r3, #1
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e002      	b.n	8004bb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b088      	sub	sp, #32
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	21a5      	movs	r1, #165	; 0xa5
 8004bdc:	f001 fe5b 	bl	8006896 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004bea:	440b      	add	r3, r1
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f023 0307 	bic.w	r3, r3, #7
 8004bf8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <prvInitialiseNewTask+0x5a>
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	b672      	cpsid	i
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	b662      	cpsie	i
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e7fe      	b.n	8004c1a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01f      	beq.n	8004c62 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e012      	b.n	8004c4e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	7819      	ldrb	r1, [r3, #0]
 8004c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	3334      	adds	r3, #52	; 0x34
 8004c38:	460a      	mov	r2, r1
 8004c3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d006      	beq.n	8004c56 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b0f      	cmp	r3, #15
 8004c52:	d9e9      	bls.n	8004c28 <prvInitialiseNewTask+0x66>
 8004c54:	e000      	b.n	8004c58 <prvInitialiseNewTask+0x96>
			{
				break;
 8004c56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c60:	e003      	b.n	8004c6a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	2b37      	cmp	r3, #55	; 0x37
 8004c6e:	d901      	bls.n	8004c74 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c70:	2337      	movs	r3, #55	; 0x37
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	2200      	movs	r2, #0
 8004c84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff f96a 	bl	8003f64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	3318      	adds	r3, #24
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff f965 	bl	8003f64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	68f9      	ldr	r1, [r7, #12]
 8004cc2:	69b8      	ldr	r0, [r7, #24]
 8004cc4:	f001 f9aa 	bl	800601c <pxPortInitialiseStack>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cda:	bf00      	nop
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cec:	f001 fa9c 	bl	8006228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cf0:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <prvAddNewTaskToReadyList+0xc4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	; (8004da8 <prvAddNewTaskToReadyList+0xc4>)
 8004cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <prvAddNewTaskToReadyList+0xc8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d02:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <prvAddNewTaskToReadyList+0xc8>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d08:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <prvAddNewTaskToReadyList+0xc4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d110      	bne.n	8004d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d10:	f000 fc92 	bl	8005638 <prvInitialiseTaskLists>
 8004d14:	e00d      	b.n	8004d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <prvAddNewTaskToReadyList+0xcc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d1e:	4b23      	ldr	r3, [pc, #140]	; (8004dac <prvAddNewTaskToReadyList+0xc8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d802      	bhi.n	8004d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d2c:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <prvAddNewTaskToReadyList+0xc8>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d32:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <prvAddNewTaskToReadyList+0xd0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <prvAddNewTaskToReadyList+0xd0>)
 8004d3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <prvAddNewTaskToReadyList+0xd0>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <prvAddNewTaskToReadyList+0xd4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d903      	bls.n	8004d58 <prvAddNewTaskToReadyList+0x74>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <prvAddNewTaskToReadyList+0xd4>)
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <prvAddNewTaskToReadyList+0xd8>)
 8004d66:	441a      	add	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7ff f905 	bl	8003f7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d74:	f001 fa8a 	bl	800628c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <prvAddNewTaskToReadyList+0xcc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <prvAddNewTaskToReadyList+0xc8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d207      	bcs.n	8004d9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <prvAddNewTaskToReadyList+0xdc>)
 8004d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000c24 	.word	0x20000c24
 8004dac:	20000750 	.word	0x20000750
 8004db0:	20000c30 	.word	0x20000c30
 8004db4:	20000c40 	.word	0x20000c40
 8004db8:	20000c2c 	.word	0x20000c2c
 8004dbc:	20000754 	.word	0x20000754
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004dcc:	f001 fa2c 	bl	8006228 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <vTaskDelete+0x18>
 8004dd6:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <vTaskDelete+0xc8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	e000      	b.n	8004dde <vTaskDelete+0x1a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff f927 	bl	8004038 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3318      	adds	r3, #24
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff f91e 	bl	8004038 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004dfc:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <vTaskDelete+0xcc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3301      	adds	r3, #1
 8004e02:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <vTaskDelete+0xcc>)
 8004e04:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004e06:	4b21      	ldr	r3, [pc, #132]	; (8004e8c <vTaskDelete+0xc8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d10b      	bne.n	8004e28 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	481f      	ldr	r0, [pc, #124]	; (8004e94 <vTaskDelete+0xd0>)
 8004e18:	f7ff f8b1 	bl	8003f7e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004e1c:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <vTaskDelete+0xd4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <vTaskDelete+0xd4>)
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e009      	b.n	8004e3c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004e28:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <vTaskDelete+0xd8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <vTaskDelete+0xd8>)
 8004e30:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fc6c 	bl	8005710 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004e38:	f000 fc9a 	bl	8005770 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004e3c:	f001 fa26 	bl	800628c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004e40:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <vTaskDelete+0xdc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01c      	beq.n	8004e82 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <vTaskDelete+0xc8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d117      	bne.n	8004e82 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <vTaskDelete+0xe0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <vTaskDelete+0xae>
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	b672      	cpsid	i
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	b662      	cpsie	i
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	e7fe      	b.n	8004e70 <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <vTaskDelete+0xe4>)
 8004e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000750 	.word	0x20000750
 8004e90:	20000c40 	.word	0x20000c40
 8004e94:	20000bf8 	.word	0x20000bf8
 8004e98:	20000c0c 	.word	0x20000c0c
 8004e9c:	20000c24 	.word	0x20000c24
 8004ea0:	20000c30 	.word	0x20000c30
 8004ea4:	20000c4c 	.word	0x20000c4c
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d018      	beq.n	8004ef0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <vTaskDelay+0x64>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <vTaskDelay+0x32>
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	b672      	cpsid	i
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	b662      	cpsie	i
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	e7fe      	b.n	8004edc <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004ede:	f000 f883 	bl	8004fe8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fcf1 	bl	80058cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eea:	f000 f88b 	bl	8005004 <xTaskResumeAll>
 8004eee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d107      	bne.n	8004f06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <vTaskDelay+0x68>)
 8004ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000c4c 	.word	0x20000c4c
 8004f14:	e000ed04 	.word	0xe000ed04

08004f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f26:	463a      	mov	r2, r7
 8004f28:	1d39      	adds	r1, r7, #4
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe ffc4 	bl	8003ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	9202      	str	r2, [sp, #8]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2300      	movs	r3, #0
 8004f44:	460a      	mov	r2, r1
 8004f46:	4922      	ldr	r1, [pc, #136]	; (8004fd0 <vTaskStartScheduler+0xb8>)
 8004f48:	4822      	ldr	r0, [pc, #136]	; (8004fd4 <vTaskStartScheduler+0xbc>)
 8004f4a:	f7ff fd95 	bl	8004a78 <xTaskCreateStatic>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <vTaskStartScheduler+0xc0>)
 8004f52:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f54:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <vTaskStartScheduler+0xc0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e001      	b.n	8004f66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d102      	bne.n	8004f72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f6c:	f000 fd02 	bl	8005974 <xTimerCreateTimerTask>
 8004f70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d117      	bne.n	8004fa8 <vTaskStartScheduler+0x90>
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	b672      	cpsid	i
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	b662      	cpsie	i
 8004f8c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <vTaskStartScheduler+0xc4>)
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <vTaskStartScheduler+0xc8>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <vTaskStartScheduler+0xcc>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fa2:	f001 f8c5 	bl	8006130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fa6:	e00f      	b.n	8004fc8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d10b      	bne.n	8004fc8 <vTaskStartScheduler+0xb0>
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	b672      	cpsid	i
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	b662      	cpsie	i
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e7fe      	b.n	8004fc6 <vTaskStartScheduler+0xae>
}
 8004fc8:	bf00      	nop
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	080071ec 	.word	0x080071ec
 8004fd4:	08005609 	.word	0x08005609
 8004fd8:	20000c48 	.word	0x20000c48
 8004fdc:	20000c44 	.word	0x20000c44
 8004fe0:	20000c30 	.word	0x20000c30
 8004fe4:	20000c28 	.word	0x20000c28

08004fe8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fec:	4b04      	ldr	r3, [pc, #16]	; (8005000 <vTaskSuspendAll+0x18>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	4a03      	ldr	r2, [pc, #12]	; (8005000 <vTaskSuspendAll+0x18>)
 8004ff4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004ff6:	bf00      	nop
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	20000c4c 	.word	0x20000c4c

08005004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005012:	4b42      	ldr	r3, [pc, #264]	; (800511c <xTaskResumeAll+0x118>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10b      	bne.n	8005032 <xTaskResumeAll+0x2e>
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	b672      	cpsid	i
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	b662      	cpsie	i
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	e7fe      	b.n	8005030 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005032:	f001 f8f9 	bl	8006228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005036:	4b39      	ldr	r3, [pc, #228]	; (800511c <xTaskResumeAll+0x118>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3b01      	subs	r3, #1
 800503c:	4a37      	ldr	r2, [pc, #220]	; (800511c <xTaskResumeAll+0x118>)
 800503e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005040:	4b36      	ldr	r3, [pc, #216]	; (800511c <xTaskResumeAll+0x118>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d162      	bne.n	800510e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005048:	4b35      	ldr	r3, [pc, #212]	; (8005120 <xTaskResumeAll+0x11c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d05e      	beq.n	800510e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005050:	e02f      	b.n	80050b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005052:	4b34      	ldr	r3, [pc, #208]	; (8005124 <xTaskResumeAll+0x120>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3318      	adds	r3, #24
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe ffea 	bl	8004038 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3304      	adds	r3, #4
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe ffe5 	bl	8004038 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	4b2d      	ldr	r3, [pc, #180]	; (8005128 <xTaskResumeAll+0x124>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <xTaskResumeAll+0x7e>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	4a2a      	ldr	r2, [pc, #168]	; (8005128 <xTaskResumeAll+0x124>)
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4a27      	ldr	r2, [pc, #156]	; (800512c <xTaskResumeAll+0x128>)
 8005090:	441a      	add	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3304      	adds	r3, #4
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7fe ff70 	bl	8003f7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a2:	4b23      	ldr	r3, [pc, #140]	; (8005130 <xTaskResumeAll+0x12c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d302      	bcc.n	80050b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80050ac:	4b21      	ldr	r3, [pc, #132]	; (8005134 <xTaskResumeAll+0x130>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050b2:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <xTaskResumeAll+0x120>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1cb      	bne.n	8005052 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050c0:	f000 fb56 	bl	8005770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <xTaskResumeAll+0x134>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d010      	beq.n	80050f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050d0:	f000 f846 	bl	8005160 <xTaskIncrementTick>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050da:	4b16      	ldr	r3, [pc, #88]	; (8005134 <xTaskResumeAll+0x130>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f1      	bne.n	80050d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80050ec:	4b12      	ldr	r3, [pc, #72]	; (8005138 <xTaskResumeAll+0x134>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <xTaskResumeAll+0x130>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050fa:	2301      	movs	r3, #1
 80050fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <xTaskResumeAll+0x138>)
 8005100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800510e:	f001 f8bd 	bl	800628c <vPortExitCritical>

	return xAlreadyYielded;
 8005112:	68bb      	ldr	r3, [r7, #8]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000c4c 	.word	0x20000c4c
 8005120:	20000c24 	.word	0x20000c24
 8005124:	20000be4 	.word	0x20000be4
 8005128:	20000c2c 	.word	0x20000c2c
 800512c:	20000754 	.word	0x20000754
 8005130:	20000750 	.word	0x20000750
 8005134:	20000c38 	.word	0x20000c38
 8005138:	20000c34 	.word	0x20000c34
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <xTaskGetTickCount+0x1c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800514c:	687b      	ldr	r3, [r7, #4]
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000c28 	.word	0x20000c28

08005160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800516a:	4b4f      	ldr	r3, [pc, #316]	; (80052a8 <xTaskIncrementTick+0x148>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f040 808a 	bne.w	8005288 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005174:	4b4d      	ldr	r3, [pc, #308]	; (80052ac <xTaskIncrementTick+0x14c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800517c:	4a4b      	ldr	r2, [pc, #300]	; (80052ac <xTaskIncrementTick+0x14c>)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d121      	bne.n	80051cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005188:	4b49      	ldr	r3, [pc, #292]	; (80052b0 <xTaskIncrementTick+0x150>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00b      	beq.n	80051aa <xTaskIncrementTick+0x4a>
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	b672      	cpsid	i
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	b662      	cpsie	i
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	e7fe      	b.n	80051a8 <xTaskIncrementTick+0x48>
 80051aa:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <xTaskIncrementTick+0x150>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <xTaskIncrementTick+0x154>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3e      	ldr	r2, [pc, #248]	; (80052b0 <xTaskIncrementTick+0x150>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4a3e      	ldr	r2, [pc, #248]	; (80052b4 <xTaskIncrementTick+0x154>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <xTaskIncrementTick+0x158>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	4a3c      	ldr	r2, [pc, #240]	; (80052b8 <xTaskIncrementTick+0x158>)
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	f000 fad2 	bl	8005770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051cc:	4b3b      	ldr	r3, [pc, #236]	; (80052bc <xTaskIncrementTick+0x15c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d349      	bcc.n	800526a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051d6:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <xTaskIncrementTick+0x150>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e0:	4b36      	ldr	r3, [pc, #216]	; (80052bc <xTaskIncrementTick+0x15c>)
 80051e2:	f04f 32ff 	mov.w	r2, #4294967295
 80051e6:	601a      	str	r2, [r3, #0]
					break;
 80051e8:	e03f      	b.n	800526a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ea:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <xTaskIncrementTick+0x150>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d203      	bcs.n	800520a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005202:	4a2e      	ldr	r2, [pc, #184]	; (80052bc <xTaskIncrementTick+0x15c>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005208:	e02f      	b.n	800526a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3304      	adds	r3, #4
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe ff12 	bl	8004038 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	3318      	adds	r3, #24
 8005220:	4618      	mov	r0, r3
 8005222:	f7fe ff09 	bl	8004038 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <xTaskIncrementTick+0x160>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d903      	bls.n	800523a <xTaskIncrementTick+0xda>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <xTaskIncrementTick+0x160>)
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <xTaskIncrementTick+0x164>)
 8005248:	441a      	add	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7fe fe94 	bl	8003f7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <xTaskIncrementTick+0x168>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	429a      	cmp	r2, r3
 8005262:	d3b8      	bcc.n	80051d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005264:	2301      	movs	r3, #1
 8005266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005268:	e7b5      	b.n	80051d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800526a:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <xTaskIncrementTick+0x168>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4914      	ldr	r1, [pc, #80]	; (80052c4 <xTaskIncrementTick+0x164>)
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d907      	bls.n	8005292 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005282:	2301      	movs	r3, #1
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e004      	b.n	8005292 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005288:	4b10      	ldr	r3, [pc, #64]	; (80052cc <xTaskIncrementTick+0x16c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	4a0f      	ldr	r2, [pc, #60]	; (80052cc <xTaskIncrementTick+0x16c>)
 8005290:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005292:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <xTaskIncrementTick+0x170>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800529a:	2301      	movs	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800529e:	697b      	ldr	r3, [r7, #20]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000c4c 	.word	0x20000c4c
 80052ac:	20000c28 	.word	0x20000c28
 80052b0:	20000bdc 	.word	0x20000bdc
 80052b4:	20000be0 	.word	0x20000be0
 80052b8:	20000c3c 	.word	0x20000c3c
 80052bc:	20000c44 	.word	0x20000c44
 80052c0:	20000c2c 	.word	0x20000c2c
 80052c4:	20000754 	.word	0x20000754
 80052c8:	20000750 	.word	0x20000750
 80052cc:	20000c34 	.word	0x20000c34
 80052d0:	20000c38 	.word	0x20000c38

080052d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052da:	4b28      	ldr	r3, [pc, #160]	; (800537c <vTaskSwitchContext+0xa8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052e2:	4b27      	ldr	r3, [pc, #156]	; (8005380 <vTaskSwitchContext+0xac>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052e8:	e042      	b.n	8005370 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <vTaskSwitchContext+0xac>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f0:	4b24      	ldr	r3, [pc, #144]	; (8005384 <vTaskSwitchContext+0xb0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	e011      	b.n	800531c <vTaskSwitchContext+0x48>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <vTaskSwitchContext+0x42>
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	b672      	cpsid	i
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	b662      	cpsie	i
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	e7fe      	b.n	8005314 <vTaskSwitchContext+0x40>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b01      	subs	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	491a      	ldr	r1, [pc, #104]	; (8005388 <vTaskSwitchContext+0xb4>)
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0e3      	beq.n	80052f8 <vTaskSwitchContext+0x24>
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4a13      	ldr	r2, [pc, #76]	; (8005388 <vTaskSwitchContext+0xb4>)
 800533c:	4413      	add	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	3308      	adds	r3, #8
 8005352:	429a      	cmp	r2, r3
 8005354:	d104      	bne.n	8005360 <vTaskSwitchContext+0x8c>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	605a      	str	r2, [r3, #4]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <vTaskSwitchContext+0xb8>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4a06      	ldr	r2, [pc, #24]	; (8005384 <vTaskSwitchContext+0xb0>)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6013      	str	r3, [r2, #0]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	20000c4c 	.word	0x20000c4c
 8005380:	20000c38 	.word	0x20000c38
 8005384:	20000c2c 	.word	0x20000c2c
 8005388:	20000754 	.word	0x20000754
 800538c:	20000750 	.word	0x20000750

08005390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10b      	bne.n	80053b8 <vTaskPlaceOnEventList+0x28>
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	b672      	cpsid	i
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	b662      	cpsie	i
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e7fe      	b.n	80053b6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <vTaskPlaceOnEventList+0x48>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3318      	adds	r3, #24
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fe fe00 	bl	8003fc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053c6:	2101      	movs	r1, #1
 80053c8:	6838      	ldr	r0, [r7, #0]
 80053ca:	f000 fa7f 	bl	80058cc <prvAddCurrentTaskToDelayedList>
}
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000750 	.word	0x20000750

080053dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <vTaskPlaceOnEventListRestricted+0x2a>
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	b672      	cpsid	i
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	b662      	cpsie	i
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e7fe      	b.n	8005404 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <vTaskPlaceOnEventListRestricted+0x54>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3318      	adds	r3, #24
 800540c:	4619      	mov	r1, r3
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7fe fdb5 	bl	8003f7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	68b8      	ldr	r0, [r7, #8]
 8005424:	f000 fa52 	bl	80058cc <prvAddCurrentTaskToDelayedList>
	}
 8005428:	bf00      	nop
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000750 	.word	0x20000750

08005434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <xTaskRemoveFromEventList+0x2e>
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	b672      	cpsid	i
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	b662      	cpsie	i
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e7fe      	b.n	8005460 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	3318      	adds	r3, #24
 8005466:	4618      	mov	r0, r3
 8005468:	f7fe fde6 	bl	8004038 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546c:	4b1d      	ldr	r3, [pc, #116]	; (80054e4 <xTaskRemoveFromEventList+0xb0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d11d      	bne.n	80054b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	3304      	adds	r3, #4
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe fddd 	bl	8004038 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <xTaskRemoveFromEventList+0xb4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d903      	bls.n	8005492 <xTaskRemoveFromEventList+0x5e>
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <xTaskRemoveFromEventList+0xb4>)
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4a13      	ldr	r2, [pc, #76]	; (80054ec <xTaskRemoveFromEventList+0xb8>)
 80054a0:	441a      	add	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f7fe fd68 	bl	8003f7e <vListInsertEnd>
 80054ae:	e005      	b.n	80054bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	3318      	adds	r3, #24
 80054b4:	4619      	mov	r1, r3
 80054b6:	480e      	ldr	r0, [pc, #56]	; (80054f0 <xTaskRemoveFromEventList+0xbc>)
 80054b8:	f7fe fd61 	bl	8003f7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <xTaskRemoveFromEventList+0xc0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d905      	bls.n	80054d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054ca:	2301      	movs	r3, #1
 80054cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <xTaskRemoveFromEventList+0xc4>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e001      	b.n	80054da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054da:	697b      	ldr	r3, [r7, #20]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000c4c 	.word	0x20000c4c
 80054e8:	20000c2c 	.word	0x20000c2c
 80054ec:	20000754 	.word	0x20000754
 80054f0:	20000be4 	.word	0x20000be4
 80054f4:	20000750 	.word	0x20000750
 80054f8:	20000c38 	.word	0x20000c38

080054fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <vTaskInternalSetTimeOutState+0x24>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <vTaskInternalSetTimeOutState+0x28>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	605a      	str	r2, [r3, #4]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	20000c3c 	.word	0x20000c3c
 8005524:	20000c28 	.word	0x20000c28

08005528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <xTaskCheckForTimeOut+0x28>
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	b672      	cpsid	i
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	b662      	cpsie	i
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e7fe      	b.n	800554e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <xTaskCheckForTimeOut+0x46>
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	b672      	cpsid	i
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	b662      	cpsie	i
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e7fe      	b.n	800556c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800556e:	f000 fe5b 	bl	8006228 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005572:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <xTaskCheckForTimeOut+0xc0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d102      	bne.n	8005592 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	e023      	b.n	80055da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <xTaskCheckForTimeOut+0xc4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d007      	beq.n	80055ae <xTaskCheckForTimeOut+0x86>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	e015      	b.n	80055da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d20b      	bcs.n	80055d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff ff99 	bl	80054fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	e004      	b.n	80055da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055d6:	2301      	movs	r3, #1
 80055d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055da:	f000 fe57 	bl	800628c <vPortExitCritical>

	return xReturn;
 80055de:	69fb      	ldr	r3, [r7, #28]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000c28 	.word	0x20000c28
 80055ec:	20000c3c 	.word	0x20000c3c

080055f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055f4:	4b03      	ldr	r3, [pc, #12]	; (8005604 <vTaskMissedYield+0x14>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	20000c38 	.word	0x20000c38

08005608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005610:	f000 f852 	bl	80056b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005614:	4b06      	ldr	r3, [pc, #24]	; (8005630 <prvIdleTask+0x28>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d9f9      	bls.n	8005610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <prvIdleTask+0x2c>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800562c:	e7f0      	b.n	8005610 <prvIdleTask+0x8>
 800562e:	bf00      	nop
 8005630:	20000754 	.word	0x20000754
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	e00c      	b.n	800565e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4a12      	ldr	r2, [pc, #72]	; (8005698 <prvInitialiseTaskLists+0x60>)
 8005650:	4413      	add	r3, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fc66 	bl	8003f24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3301      	adds	r3, #1
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b37      	cmp	r3, #55	; 0x37
 8005662:	d9ef      	bls.n	8005644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005664:	480d      	ldr	r0, [pc, #52]	; (800569c <prvInitialiseTaskLists+0x64>)
 8005666:	f7fe fc5d 	bl	8003f24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800566a:	480d      	ldr	r0, [pc, #52]	; (80056a0 <prvInitialiseTaskLists+0x68>)
 800566c:	f7fe fc5a 	bl	8003f24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005670:	480c      	ldr	r0, [pc, #48]	; (80056a4 <prvInitialiseTaskLists+0x6c>)
 8005672:	f7fe fc57 	bl	8003f24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005676:	480c      	ldr	r0, [pc, #48]	; (80056a8 <prvInitialiseTaskLists+0x70>)
 8005678:	f7fe fc54 	bl	8003f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800567c:	480b      	ldr	r0, [pc, #44]	; (80056ac <prvInitialiseTaskLists+0x74>)
 800567e:	f7fe fc51 	bl	8003f24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <prvInitialiseTaskLists+0x78>)
 8005684:	4a05      	ldr	r2, [pc, #20]	; (800569c <prvInitialiseTaskLists+0x64>)
 8005686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <prvInitialiseTaskLists+0x7c>)
 800568a:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <prvInitialiseTaskLists+0x68>)
 800568c:	601a      	str	r2, [r3, #0]
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000754 	.word	0x20000754
 800569c:	20000bb4 	.word	0x20000bb4
 80056a0:	20000bc8 	.word	0x20000bc8
 80056a4:	20000be4 	.word	0x20000be4
 80056a8:	20000bf8 	.word	0x20000bf8
 80056ac:	20000c10 	.word	0x20000c10
 80056b0:	20000bdc 	.word	0x20000bdc
 80056b4:	20000be0 	.word	0x20000be0

080056b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056be:	e019      	b.n	80056f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056c0:	f000 fdb2 	bl	8006228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c4:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <prvCheckTasksWaitingTermination+0x4c>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fe fcb1 	bl	8004038 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <prvCheckTasksWaitingTermination+0x50>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3b01      	subs	r3, #1
 80056dc:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <prvCheckTasksWaitingTermination+0x50>)
 80056de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056e0:	4b0a      	ldr	r3, [pc, #40]	; (800570c <prvCheckTasksWaitingTermination+0x54>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	4a09      	ldr	r2, [pc, #36]	; (800570c <prvCheckTasksWaitingTermination+0x54>)
 80056e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056ea:	f000 fdcf 	bl	800628c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f80e 	bl	8005710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <prvCheckTasksWaitingTermination+0x54>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e1      	bne.n	80056c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20000bf8 	.word	0x20000bf8
 8005708:	20000c24 	.word	0x20000c24
 800570c:	20000c0c 	.word	0x20000c0c

08005710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800571e:	2b00      	cmp	r3, #0
 8005720:	d108      	bne.n	8005734 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	4618      	mov	r0, r3
 8005728:	f000 ff68 	bl	80065fc <vPortFree>
				vPortFree( pxTCB );
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 ff65 	bl	80065fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005732:	e019      	b.n	8005768 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800573a:	2b01      	cmp	r3, #1
 800573c:	d103      	bne.n	8005746 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 ff5c 	bl	80065fc <vPortFree>
	}
 8005744:	e010      	b.n	8005768 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800574c:	2b02      	cmp	r3, #2
 800574e:	d00b      	beq.n	8005768 <prvDeleteTCB+0x58>
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	b672      	cpsid	i
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	b662      	cpsie	i
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	e7fe      	b.n	8005766 <prvDeleteTCB+0x56>
	}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvResetNextTaskUnblockTime+0x38>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <prvResetNextTaskUnblockTime+0x3c>)
 8005782:	f04f 32ff 	mov.w	r2, #4294967295
 8005786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005788:	e008      	b.n	800579c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <prvResetNextTaskUnblockTime+0x38>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <prvResetNextTaskUnblockTime+0x3c>)
 800579a:	6013      	str	r3, [r2, #0]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	20000bdc 	.word	0x20000bdc
 80057ac:	20000c44 	.word	0x20000c44

080057b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <xTaskGetSchedulerState+0x34>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057be:	2301      	movs	r3, #1
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	e008      	b.n	80057d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <xTaskGetSchedulerState+0x38>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057cc:	2302      	movs	r3, #2
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	e001      	b.n	80057d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057d6:	687b      	ldr	r3, [r7, #4]
	}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000c30 	.word	0x20000c30
 80057e8:	20000c4c 	.word	0x20000c4c

080057ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d058      	beq.n	80058b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005802:	4b2f      	ldr	r3, [pc, #188]	; (80058c0 <xTaskPriorityDisinherit+0xd4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	429a      	cmp	r2, r3
 800580a:	d00b      	beq.n	8005824 <xTaskPriorityDisinherit+0x38>
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	b672      	cpsid	i
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	b662      	cpsie	i
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e7fe      	b.n	8005822 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <xTaskPriorityDisinherit+0x58>
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	b672      	cpsid	i
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	b662      	cpsie	i
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	e7fe      	b.n	8005842 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	1e5a      	subs	r2, r3, #1
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005856:	429a      	cmp	r2, r3
 8005858:	d02c      	beq.n	80058b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585e:	2b00      	cmp	r3, #0
 8005860:	d128      	bne.n	80058b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	3304      	adds	r3, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fbe6 	bl	8004038 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005884:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <xTaskPriorityDisinherit+0xd8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d903      	bls.n	8005894 <xTaskPriorityDisinherit+0xa8>
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	4a0c      	ldr	r2, [pc, #48]	; (80058c4 <xTaskPriorityDisinherit+0xd8>)
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <xTaskPriorityDisinherit+0xdc>)
 80058a2:	441a      	add	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f7fe fb67 	bl	8003f7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058b0:	2301      	movs	r3, #1
 80058b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058b4:	697b      	ldr	r3, [r7, #20]
	}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000750 	.word	0x20000750
 80058c4:	20000c2c 	.word	0x20000c2c
 80058c8:	20000754 	.word	0x20000754

080058cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058d6:	4b21      	ldr	r3, [pc, #132]	; (800595c <prvAddCurrentTaskToDelayedList+0x90>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058dc:	4b20      	ldr	r3, [pc, #128]	; (8005960 <prvAddCurrentTaskToDelayedList+0x94>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fba8 	bl	8004038 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d10a      	bne.n	8005906 <prvAddCurrentTaskToDelayedList+0x3a>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <prvAddCurrentTaskToDelayedList+0x94>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4819      	ldr	r0, [pc, #100]	; (8005964 <prvAddCurrentTaskToDelayedList+0x98>)
 8005900:	f7fe fb3d 	bl	8003f7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005904:	e026      	b.n	8005954 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4413      	add	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800590e:	4b14      	ldr	r3, [pc, #80]	; (8005960 <prvAddCurrentTaskToDelayedList+0x94>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	429a      	cmp	r2, r3
 800591c:	d209      	bcs.n	8005932 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <prvAddCurrentTaskToDelayedList+0x94>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f7fe fb4b 	bl	8003fc6 <vListInsert>
}
 8005930:	e010      	b.n	8005954 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005932:	4b0e      	ldr	r3, [pc, #56]	; (800596c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <prvAddCurrentTaskToDelayedList+0x94>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f7fe fb41 	bl	8003fc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005944:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	d202      	bcs.n	8005954 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800594e:	4a08      	ldr	r2, [pc, #32]	; (8005970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6013      	str	r3, [r2, #0]
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20000c28 	.word	0x20000c28
 8005960:	20000750 	.word	0x20000750
 8005964:	20000c10 	.word	0x20000c10
 8005968:	20000be0 	.word	0x20000be0
 800596c:	20000bdc 	.word	0x20000bdc
 8005970:	20000c44 	.word	0x20000c44

08005974 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800597e:	f000 fb0d 	bl	8005f9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <xTimerCreateTimerTask+0x84>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d021      	beq.n	80059ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005992:	1d3a      	adds	r2, r7, #4
 8005994:	f107 0108 	add.w	r1, r7, #8
 8005998:	f107 030c 	add.w	r3, r7, #12
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe faa7 	bl	8003ef0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	9202      	str	r2, [sp, #8]
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	2302      	movs	r3, #2
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	460a      	mov	r2, r1
 80059b4:	4911      	ldr	r1, [pc, #68]	; (80059fc <xTimerCreateTimerTask+0x88>)
 80059b6:	4812      	ldr	r0, [pc, #72]	; (8005a00 <xTimerCreateTimerTask+0x8c>)
 80059b8:	f7ff f85e 	bl	8004a78 <xTaskCreateStatic>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <xTimerCreateTimerTask+0x90>)
 80059c0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <xTimerCreateTimerTask+0x90>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059ca:	2301      	movs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <xTimerCreateTimerTask+0x78>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	b672      	cpsid	i
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	b662      	cpsie	i
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e7fe      	b.n	80059ea <xTimerCreateTimerTask+0x76>
	return xReturn;
 80059ec:	697b      	ldr	r3, [r7, #20]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000c80 	.word	0x20000c80
 80059fc:	080071f4 	.word	0x080071f4
 8005a00:	08005b41 	.word	0x08005b41
 8005a04:	20000c84 	.word	0x20000c84

08005a08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10b      	bne.n	8005a38 <xTimerGenericCommand+0x30>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	b672      	cpsid	i
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	b662      	cpsie	i
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	e7fe      	b.n	8005a36 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a38:	4b19      	ldr	r3, [pc, #100]	; (8005aa0 <xTimerGenericCommand+0x98>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d02a      	beq.n	8005a96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b05      	cmp	r3, #5
 8005a50:	dc18      	bgt.n	8005a84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a52:	f7ff fead 	bl	80057b0 <xTaskGetSchedulerState>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d109      	bne.n	8005a70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a5c:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <xTimerGenericCommand+0x98>)
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	f107 0110 	add.w	r1, r7, #16
 8005a64:	2300      	movs	r3, #0
 8005a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a68:	f7fe fc1a 	bl	80042a0 <xQueueGenericSend>
 8005a6c:	6278      	str	r0, [r7, #36]	; 0x24
 8005a6e:	e012      	b.n	8005a96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <xTimerGenericCommand+0x98>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	f107 0110 	add.w	r1, r7, #16
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fe fc10 	bl	80042a0 <xQueueGenericSend>
 8005a80:	6278      	str	r0, [r7, #36]	; 0x24
 8005a82:	e008      	b.n	8005a96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <xTimerGenericCommand+0x98>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	f107 0110 	add.w	r1, r7, #16
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	f7fe fd08 	bl	80044a4 <xQueueGenericSendFromISR>
 8005a94:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3728      	adds	r7, #40	; 0x28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000c80 	.word	0x20000c80

08005aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aae:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <prvProcessExpiredTimer+0x98>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe fabb 	bl	8004038 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d023      	beq.n	8005b18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	18d1      	adds	r1, r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	6978      	ldr	r0, [r7, #20]
 8005ade:	f000 f8d3 	bl	8005c88 <prvInsertTimerInActiveList>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	2100      	movs	r1, #0
 8005af2:	6978      	ldr	r0, [r7, #20]
 8005af4:	f7ff ff88 	bl	8005a08 <xTimerGenericCommand>
 8005af8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d114      	bne.n	8005b2a <prvProcessExpiredTimer+0x86>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	b672      	cpsid	i
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	b662      	cpsie	i
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e7fe      	b.n	8005b16 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b1e:	f023 0301 	bic.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	6978      	ldr	r0, [r7, #20]
 8005b30:	4798      	blx	r3
}
 8005b32:	bf00      	nop
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000c78 	.word	0x20000c78

08005b40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b48:	f107 0308 	add.w	r3, r7, #8
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 f857 	bl	8005c00 <prvGetNextExpireTime>
 8005b52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4619      	mov	r1, r3
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f803 	bl	8005b64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b5e:	f000 f8d5 	bl	8005d0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b62:	e7f1      	b.n	8005b48 <prvTimerTask+0x8>

08005b64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b6e:	f7ff fa3b 	bl	8004fe8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b72:	f107 0308 	add.w	r3, r7, #8
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f866 	bl	8005c48 <prvSampleTimeNow>
 8005b7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d130      	bne.n	8005be6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <prvProcessTimerOrBlockTask+0x3c>
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d806      	bhi.n	8005ba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b92:	f7ff fa37 	bl	8005004 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff83 	bl	8005aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b9e:	e024      	b.n	8005bea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <prvProcessTimerOrBlockTask+0x90>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <prvProcessTimerOrBlockTask+0x50>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <prvProcessTimerOrBlockTask+0x52>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <prvProcessTimerOrBlockTask+0x94>)
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f7fe ff23 	bl	8004a10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bca:	f7ff fa1b 	bl	8005004 <xTaskResumeAll>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <prvProcessTimerOrBlockTask+0x98>)
 8005bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	f3bf 8f6f 	isb	sy
}
 8005be4:	e001      	b.n	8005bea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005be6:	f7ff fa0d 	bl	8005004 <xTaskResumeAll>
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000c7c 	.word	0x20000c7c
 8005bf8:	20000c80 	.word	0x20000c80
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <prvGetNextExpireTime+0x44>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <prvGetNextExpireTime+0x16>
 8005c12:	2201      	movs	r2, #1
 8005c14:	e000      	b.n	8005c18 <prvGetNextExpireTime+0x18>
 8005c16:	2200      	movs	r2, #0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d105      	bne.n	8005c30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <prvGetNextExpireTime+0x44>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e001      	b.n	8005c34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000c78 	.word	0x20000c78

08005c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c50:	f7ff fa76 	bl	8005140 <xTaskGetTickCount>
 8005c54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <prvSampleTimeNow+0x3c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d205      	bcs.n	8005c6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c60:	f000 f936 	bl	8005ed0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c72:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <prvSampleTimeNow+0x3c>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c78:	68fb      	ldr	r3, [r7, #12]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000c88 	.word	0x20000c88

08005c88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d812      	bhi.n	8005cd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	1ad2      	subs	r2, r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d302      	bcc.n	8005cc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e01b      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cc2:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <prvInsertTimerInActiveList+0x7c>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7fe f97a 	bl	8003fc6 <vListInsert>
 8005cd2:	e012      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d206      	bcs.n	8005cea <prvInsertTimerInActiveList+0x62>
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e007      	b.n	8005cfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <prvInsertTimerInActiveList+0x80>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f7fe f966 	bl	8003fc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cfa:	697b      	ldr	r3, [r7, #20]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000c7c 	.word	0x20000c7c
 8005d08:	20000c78 	.word	0x20000c78

08005d0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	; 0x38
 8005d10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d12:	e0cc      	b.n	8005eae <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da19      	bge.n	8005d4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <prvProcessReceivedCommands+0x32>
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	b672      	cpsid	i
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	b662      	cpsie	i
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	e7fe      	b.n	8005d3c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d44:	6850      	ldr	r0, [r2, #4]
 8005d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d48:	6892      	ldr	r2, [r2, #8]
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f2c0 80ab 	blt.w	8005eac <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe f966 	bl	8004038 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff ff6a 	bl	8005c48 <prvSampleTimeNow>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b09      	cmp	r3, #9
 8005d7a:	f200 8098 	bhi.w	8005eae <prvProcessReceivedCommands+0x1a2>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <prvProcessReceivedCommands+0x78>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005dad 	.word	0x08005dad
 8005d90:	08005e23 	.word	0x08005e23
 8005d94:	08005e37 	.word	0x08005e37
 8005d98:	08005e83 	.word	0x08005e83
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005dad 	.word	0x08005dad
 8005da4:	08005e23 	.word	0x08005e23
 8005da8:	08005e37 	.word	0x08005e37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	18d1      	adds	r1, r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dcc:	f7ff ff5c 	bl	8005c88 <prvInsertTimerInActiveList>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d06b      	beq.n	8005eae <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ddc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d060      	beq.n	8005eae <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	441a      	add	r2, r3
 8005df4:	2300      	movs	r3, #0
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dfe:	f7ff fe03 	bl	8005a08 <xTimerGenericCommand>
 8005e02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d151      	bne.n	8005eae <prvProcessReceivedCommands+0x1a2>
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	b672      	cpsid	i
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	b662      	cpsie	i
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	e7fe      	b.n	8005e20 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e34:	e03b      	b.n	8005eae <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <prvProcessReceivedCommands+0x162>
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	b672      	cpsid	i
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	b662      	cpsie	i
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e7fe      	b.n	8005e6c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	18d1      	adds	r1, r2, r3
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e7c:	f7ff ff04 	bl	8005c88 <prvInsertTimerInActiveList>
					break;
 8005e80:	e015      	b.n	8005eae <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e92:	f000 fbb3 	bl	80065fc <vPortFree>
 8005e96:	e00a      	b.n	8005eae <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005eaa:	e000      	b.n	8005eae <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005eac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <prvProcessReceivedCommands+0x1c0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	1d39      	adds	r1, r7, #4
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fb90 	bl	80045dc <xQueueReceive>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f47f af28 	bne.w	8005d14 <prvProcessReceivedCommands+0x8>
	}
}
 8005ec4:	bf00      	nop
 8005ec6:	3730      	adds	r7, #48	; 0x30
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000c80 	.word	0x20000c80

08005ed0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ed6:	e049      	b.n	8005f6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ed8:	4b2e      	ldr	r3, [pc, #184]	; (8005f94 <prvSwitchTimerLists+0xc4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee2:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <prvSwitchTimerLists+0xc4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe f8a1 	bl	8004038 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02f      	beq.n	8005f6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d90e      	bls.n	8005f3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2a:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fe f846 	bl	8003fc6 <vListInsert>
 8005f3a:	e017      	b.n	8005f6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	2100      	movs	r1, #0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff fd5e 	bl	8005a08 <xTimerGenericCommand>
 8005f4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <prvSwitchTimerLists+0x9c>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	b672      	cpsid	i
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	b662      	cpsie	i
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	e7fe      	b.n	8005f6a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1b0      	bne.n	8005ed8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f76:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <prvSwitchTimerLists+0xc8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a04      	ldr	r2, [pc, #16]	; (8005f94 <prvSwitchTimerLists+0xc4>)
 8005f82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f84:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <prvSwitchTimerLists+0xc8>)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	6013      	str	r3, [r2, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000c78 	.word	0x20000c78
 8005f98:	20000c7c 	.word	0x20000c7c

08005f9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fa2:	f000 f941 	bl	8006228 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fa6:	4b15      	ldr	r3, [pc, #84]	; (8005ffc <prvCheckForValidListAndQueue+0x60>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d120      	bne.n	8005ff0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fae:	4814      	ldr	r0, [pc, #80]	; (8006000 <prvCheckForValidListAndQueue+0x64>)
 8005fb0:	f7fd ffb8 	bl	8003f24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fb4:	4813      	ldr	r0, [pc, #76]	; (8006004 <prvCheckForValidListAndQueue+0x68>)
 8005fb6:	f7fd ffb5 	bl	8003f24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fba:	4b13      	ldr	r3, [pc, #76]	; (8006008 <prvCheckForValidListAndQueue+0x6c>)
 8005fbc:	4a10      	ldr	r2, [pc, #64]	; (8006000 <prvCheckForValidListAndQueue+0x64>)
 8005fbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fc0:	4b12      	ldr	r3, [pc, #72]	; (800600c <prvCheckForValidListAndQueue+0x70>)
 8005fc2:	4a10      	ldr	r2, [pc, #64]	; (8006004 <prvCheckForValidListAndQueue+0x68>)
 8005fc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	4b11      	ldr	r3, [pc, #68]	; (8006010 <prvCheckForValidListAndQueue+0x74>)
 8005fcc:	4a11      	ldr	r2, [pc, #68]	; (8006014 <prvCheckForValidListAndQueue+0x78>)
 8005fce:	2110      	movs	r1, #16
 8005fd0:	200a      	movs	r0, #10
 8005fd2:	f7fe f8c5 	bl	8004160 <xQueueGenericCreateStatic>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <prvCheckForValidListAndQueue+0x60>)
 8005fda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005fdc:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <prvCheckForValidListAndQueue+0x60>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <prvCheckForValidListAndQueue+0x60>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	490b      	ldr	r1, [pc, #44]	; (8006018 <prvCheckForValidListAndQueue+0x7c>)
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe fce8 	bl	80049c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ff0:	f000 f94c 	bl	800628c <vPortExitCritical>
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000c80 	.word	0x20000c80
 8006000:	20000c50 	.word	0x20000c50
 8006004:	20000c64 	.word	0x20000c64
 8006008:	20000c78 	.word	0x20000c78
 800600c:	20000c7c 	.word	0x20000c7c
 8006010:	20000d2c 	.word	0x20000d2c
 8006014:	20000c8c 	.word	0x20000c8c
 8006018:	080071fc 	.word	0x080071fc

0800601c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3b04      	subs	r3, #4
 800602c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3b04      	subs	r3, #4
 800603a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 0201 	bic.w	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3b04      	subs	r3, #4
 800604a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800604c:	4a0c      	ldr	r2, [pc, #48]	; (8006080 <pxPortInitialiseStack+0x64>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3b14      	subs	r3, #20
 8006056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3b04      	subs	r3, #4
 8006062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f06f 0202 	mvn.w	r2, #2
 800606a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b20      	subs	r3, #32
 8006070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	08006085 	.word	0x08006085

08006084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <prvTaskExitError+0x58>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d00b      	beq.n	80060b0 <prvTaskExitError+0x2c>
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	b672      	cpsid	i
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	b662      	cpsie	i
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e7fe      	b.n	80060ae <prvTaskExitError+0x2a>
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	b672      	cpsid	i
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	b662      	cpsie	i
 80060c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060c6:	bf00      	nop
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0fc      	beq.n	80060c8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000000c 	.word	0x2000000c

080060e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <pxCurrentTCBConst2>)
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f380 8809 	msr	PSP, r0
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	4770      	bx	lr
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst2>:
 8006100:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006108:	4808      	ldr	r0, [pc, #32]	; (800612c <prvPortStartFirstTask+0x24>)
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	6800      	ldr	r0, [r0, #0]
 800610e:	f380 8808 	msr	MSP, r0
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8814 	msr	CONTROL, r0
 800611a:	b662      	cpsie	i
 800611c:	b661      	cpsie	f
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	df00      	svc	0
 8006128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800612a:	bf00      	nop
 800612c:	e000ed08 	.word	0xe000ed08

08006130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006136:	4b36      	ldr	r3, [pc, #216]	; (8006210 <xPortStartScheduler+0xe0>)
 8006138:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	22ff      	movs	r2, #255	; 0xff
 8006146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006158:	b2da      	uxtb	r2, r3
 800615a:	4b2e      	ldr	r3, [pc, #184]	; (8006214 <xPortStartScheduler+0xe4>)
 800615c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800615e:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <xPortStartScheduler+0xe8>)
 8006160:	2207      	movs	r2, #7
 8006162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006164:	e009      	b.n	800617a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006166:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <xPortStartScheduler+0xe8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3b01      	subs	r3, #1
 800616c:	4a2a      	ldr	r2, [pc, #168]	; (8006218 <xPortStartScheduler+0xe8>)
 800616e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	b2db      	uxtb	r3, r3
 8006178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d0ef      	beq.n	8006166 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006186:	4b24      	ldr	r3, [pc, #144]	; (8006218 <xPortStartScheduler+0xe8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f1c3 0307 	rsb	r3, r3, #7
 800618e:	2b04      	cmp	r3, #4
 8006190:	d00b      	beq.n	80061aa <xPortStartScheduler+0x7a>
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	b672      	cpsid	i
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	b662      	cpsie	i
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	e7fe      	b.n	80061a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061aa:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <xPortStartScheduler+0xe8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	4a19      	ldr	r2, [pc, #100]	; (8006218 <xPortStartScheduler+0xe8>)
 80061b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061b4:	4b18      	ldr	r3, [pc, #96]	; (8006218 <xPortStartScheduler+0xe8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061bc:	4a16      	ldr	r2, [pc, #88]	; (8006218 <xPortStartScheduler+0xe8>)
 80061be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <xPortStartScheduler+0xec>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a13      	ldr	r2, [pc, #76]	; (800621c <xPortStartScheduler+0xec>)
 80061ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <xPortStartScheduler+0xec>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a10      	ldr	r2, [pc, #64]	; (800621c <xPortStartScheduler+0xec>)
 80061da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061e0:	f000 f8d4 	bl	800638c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <xPortStartScheduler+0xf0>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061ea:	f000 f8f3 	bl	80063d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <xPortStartScheduler+0xf4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0c      	ldr	r2, [pc, #48]	; (8006224 <xPortStartScheduler+0xf4>)
 80061f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061fa:	f7ff ff85 	bl	8006108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061fe:	f7ff f869 	bl	80052d4 <vTaskSwitchContext>
	prvTaskExitError();
 8006202:	f7ff ff3f 	bl	8006084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	e000e400 	.word	0xe000e400
 8006214:	20000d7c 	.word	0x20000d7c
 8006218:	20000d80 	.word	0x20000d80
 800621c:	e000ed20 	.word	0xe000ed20
 8006220:	2000000c 	.word	0x2000000c
 8006224:	e000ef34 	.word	0xe000ef34

08006228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	b672      	cpsid	i
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	b662      	cpsie	i
 8006242:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <vPortEnterCritical+0x5c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	4a0e      	ldr	r2, [pc, #56]	; (8006284 <vPortEnterCritical+0x5c>)
 800624c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800624e:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <vPortEnterCritical+0x5c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d110      	bne.n	8006278 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006256:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <vPortEnterCritical+0x60>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <vPortEnterCritical+0x50>
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	b672      	cpsid	i
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	b662      	cpsie	i
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	e7fe      	b.n	8006276 <vPortEnterCritical+0x4e>
	}
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	2000000c 	.word	0x2000000c
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <vPortExitCritical+0x50>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <vPortExitCritical+0x26>
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	b672      	cpsid	i
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	b662      	cpsie	i
 80062ae:	607b      	str	r3, [r7, #4]
 80062b0:	e7fe      	b.n	80062b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4a08      	ldr	r2, [pc, #32]	; (80062dc <vPortExitCritical+0x50>)
 80062ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062bc:	4b07      	ldr	r3, [pc, #28]	; (80062dc <vPortExitCritical+0x50>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <vPortExitCritical+0x42>
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	2000000c 	.word	0x2000000c

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f01e 0f10 	tst.w	lr, #16
 80062f0:	bf08      	it	eq
 80062f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006304:	b672      	cpsid	i
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	b662      	cpsie	i
 8006314:	f7fe ffde 	bl	80052d4 <vTaskSwitchContext>
 8006318:	f04f 0000 	mov.w	r0, #0
 800631c:	f380 8811 	msr	BASEPRI, r0
 8006320:	bc09      	pop	{r0, r3}
 8006322:	6819      	ldr	r1, [r3, #0]
 8006324:	6808      	ldr	r0, [r1, #0]
 8006326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632a:	f01e 0f10 	tst.w	lr, #16
 800632e:	bf08      	it	eq
 8006330:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006334:	f380 8809 	msr	PSP, r0
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop

08006340 <pxCurrentTCBConst>:
 8006340:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	b672      	cpsid	i
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	b662      	cpsie	i
 8006362:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006364:	f7fe fefc 	bl	8005160 <xTaskIncrementTick>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <SysTick_Handler+0x40>)
 8006370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	2300      	movs	r3, #0
 8006378:	603b      	str	r3, [r7, #0]
	__asm volatile
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006396:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <vPortSetupTimerInterrupt+0x38>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <vPortSetupTimerInterrupt+0x3c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <vPortSetupTimerInterrupt+0x40>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <vPortSetupTimerInterrupt+0x44>)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ae:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e010 	.word	0xe000e010
 80063c4:	e000e018 	.word	0xe000e018
 80063c8:	20000000 	.word	0x20000000
 80063cc:	10624dd3 	.word	0x10624dd3
 80063d0:	e000e014 	.word	0xe000e014

080063d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063e4 <vPortEnableVFP+0x10>
 80063d8:	6801      	ldr	r1, [r0, #0]
 80063da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063de:	6001      	str	r1, [r0, #0]
 80063e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063e2:	bf00      	nop
 80063e4:	e000ed88 	.word	0xe000ed88

080063e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d915      	bls.n	8006426 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063fa:	4a18      	ldr	r2, [pc, #96]	; (800645c <vPortValidateInterruptPriority+0x74>)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006404:	4b16      	ldr	r3, [pc, #88]	; (8006460 <vPortValidateInterruptPriority+0x78>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	7afa      	ldrb	r2, [r7, #11]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20b      	bcs.n	8006426 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	b672      	cpsid	i
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	b662      	cpsie	i
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	e7fe      	b.n	8006424 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006426:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <vPortValidateInterruptPriority+0x7c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800642e:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <vPortValidateInterruptPriority+0x80>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d90b      	bls.n	800644e <vPortValidateInterruptPriority+0x66>
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	b672      	cpsid	i
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	b662      	cpsie	i
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	e7fe      	b.n	800644c <vPortValidateInterruptPriority+0x64>
	}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	e000e3f0 	.word	0xe000e3f0
 8006460:	20000d7c 	.word	0x20000d7c
 8006464:	e000ed0c 	.word	0xe000ed0c
 8006468:	20000d80 	.word	0x20000d80

0800646c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006478:	f7fe fdb6 	bl	8004fe8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800647c:	4b5a      	ldr	r3, [pc, #360]	; (80065e8 <pvPortMalloc+0x17c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006484:	f000 f916 	bl	80066b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006488:	4b58      	ldr	r3, [pc, #352]	; (80065ec <pvPortMalloc+0x180>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8090 	bne.w	80065b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01e      	beq.n	80064da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800649c:	2208      	movs	r2, #8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d015      	beq.n	80064da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	3308      	adds	r3, #8
 80064b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <pvPortMalloc+0x6e>
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	b672      	cpsid	i
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	b662      	cpsie	i
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e7fe      	b.n	80064d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d06a      	beq.n	80065b6 <pvPortMalloc+0x14a>
 80064e0:	4b43      	ldr	r3, [pc, #268]	; (80065f0 <pvPortMalloc+0x184>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d865      	bhi.n	80065b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ea:	4b42      	ldr	r3, [pc, #264]	; (80065f4 <pvPortMalloc+0x188>)
 80064ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064ee:	4b41      	ldr	r3, [pc, #260]	; (80065f4 <pvPortMalloc+0x188>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f4:	e004      	b.n	8006500 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d903      	bls.n	8006512 <pvPortMalloc+0xa6>
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f1      	bne.n	80064f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006512:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <pvPortMalloc+0x17c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006518:	429a      	cmp	r2, r3
 800651a:	d04c      	beq.n	80065b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2208      	movs	r2, #8
 8006522:	4413      	add	r3, r2
 8006524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	2308      	movs	r3, #8
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	429a      	cmp	r2, r3
 800653c:	d920      	bls.n	8006580 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <pvPortMalloc+0xfc>
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	b672      	cpsid	i
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	b662      	cpsie	i
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	e7fe      	b.n	8006566 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800657a:	69b8      	ldr	r0, [r7, #24]
 800657c:	f000 f8fc 	bl	8006778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006580:	4b1b      	ldr	r3, [pc, #108]	; (80065f0 <pvPortMalloc+0x184>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	4a19      	ldr	r2, [pc, #100]	; (80065f0 <pvPortMalloc+0x184>)
 800658c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <pvPortMalloc+0x184>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <pvPortMalloc+0x18c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d203      	bcs.n	80065a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800659a:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <pvPortMalloc+0x184>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a16      	ldr	r2, [pc, #88]	; (80065f8 <pvPortMalloc+0x18c>)
 80065a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4b11      	ldr	r3, [pc, #68]	; (80065ec <pvPortMalloc+0x180>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065b6:	f7fe fd25 	bl	8005004 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <pvPortMalloc+0x170>
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	b672      	cpsid	i
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	b662      	cpsie	i
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e7fe      	b.n	80065da <pvPortMalloc+0x16e>
	return pvReturn;
 80065dc:	69fb      	ldr	r3, [r7, #28]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3728      	adds	r7, #40	; 0x28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000498c 	.word	0x2000498c
 80065ec:	20004998 	.word	0x20004998
 80065f0:	20004990 	.word	0x20004990
 80065f4:	20004984 	.word	0x20004984
 80065f8:	20004994 	.word	0x20004994

080065fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d04a      	beq.n	80066a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800660e:	2308      	movs	r3, #8
 8006610:	425b      	negs	r3, r3
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4413      	add	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	4b22      	ldr	r3, [pc, #136]	; (80066ac <vPortFree+0xb0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4013      	ands	r3, r2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <vPortFree+0x46>
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	b672      	cpsid	i
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	b662      	cpsie	i
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e7fe      	b.n	8006640 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <vPortFree+0x66>
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	b672      	cpsid	i
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	b662      	cpsie	i
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	e7fe      	b.n	8006660 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	4b11      	ldr	r3, [pc, #68]	; (80066ac <vPortFree+0xb0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d019      	beq.n	80066a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d115      	bne.n	80066a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <vPortFree+0xb0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	43db      	mvns	r3, r3
 8006682:	401a      	ands	r2, r3
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006688:	f7fe fcae 	bl	8004fe8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <vPortFree+0xb4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4413      	add	r3, r2
 8006696:	4a06      	ldr	r2, [pc, #24]	; (80066b0 <vPortFree+0xb4>)
 8006698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800669a:	6938      	ldr	r0, [r7, #16]
 800669c:	f000 f86c 	bl	8006778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80066a0:	f7fe fcb0 	bl	8005004 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20004998 	.word	0x20004998
 80066b0:	20004990 	.word	0x20004990

080066b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066c0:	4b27      	ldr	r3, [pc, #156]	; (8006760 <prvHeapInit+0xac>)
 80066c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00c      	beq.n	80066e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3307      	adds	r3, #7
 80066d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0307 	bic.w	r3, r3, #7
 80066da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	4a1f      	ldr	r2, [pc, #124]	; (8006760 <prvHeapInit+0xac>)
 80066e4:	4413      	add	r3, r2
 80066e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066ec:	4a1d      	ldr	r2, [pc, #116]	; (8006764 <prvHeapInit+0xb0>)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066f2:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <prvHeapInit+0xb0>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4413      	add	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006700:	2208      	movs	r2, #8
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 0307 	bic.w	r3, r3, #7
 800670e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a15      	ldr	r2, [pc, #84]	; (8006768 <prvHeapInit+0xb4>)
 8006714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006716:	4b14      	ldr	r3, [pc, #80]	; (8006768 <prvHeapInit+0xb4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2200      	movs	r2, #0
 800671c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <prvHeapInit+0xb4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <prvHeapInit+0xb4>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <prvHeapInit+0xb8>)
 8006742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	4a09      	ldr	r2, [pc, #36]	; (8006770 <prvHeapInit+0xbc>)
 800674a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800674c:	4b09      	ldr	r3, [pc, #36]	; (8006774 <prvHeapInit+0xc0>)
 800674e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20000d84 	.word	0x20000d84
 8006764:	20004984 	.word	0x20004984
 8006768:	2000498c 	.word	0x2000498c
 800676c:	20004994 	.word	0x20004994
 8006770:	20004990 	.word	0x20004990
 8006774:	20004998 	.word	0x20004998

08006778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006780:	4b28      	ldr	r3, [pc, #160]	; (8006824 <prvInsertBlockIntoFreeList+0xac>)
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e002      	b.n	800678c <prvInsertBlockIntoFreeList+0x14>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	429a      	cmp	r2, r3
 8006794:	d8f7      	bhi.n	8006786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	4413      	add	r3, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d108      	bne.n	80067ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	441a      	add	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	441a      	add	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d118      	bne.n	8006800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4b15      	ldr	r3, [pc, #84]	; (8006828 <prvInsertBlockIntoFreeList+0xb0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d00d      	beq.n	80067f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e008      	b.n	8006808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067f6:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <prvInsertBlockIntoFreeList+0xb0>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e003      	b.n	8006808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d002      	beq.n	8006816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20004984 	.word	0x20004984
 8006828:	2000498c 	.word	0x2000498c

0800682c <__errno>:
 800682c:	4b01      	ldr	r3, [pc, #4]	; (8006834 <__errno+0x8>)
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000010 	.word	0x20000010

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4e0d      	ldr	r6, [pc, #52]	; (8006870 <__libc_init_array+0x38>)
 800683c:	4c0d      	ldr	r4, [pc, #52]	; (8006874 <__libc_init_array+0x3c>)
 800683e:	1ba4      	subs	r4, r4, r6
 8006840:	10a4      	asrs	r4, r4, #2
 8006842:	2500      	movs	r5, #0
 8006844:	42a5      	cmp	r5, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	4e0b      	ldr	r6, [pc, #44]	; (8006878 <__libc_init_array+0x40>)
 800684a:	4c0c      	ldr	r4, [pc, #48]	; (800687c <__libc_init_array+0x44>)
 800684c:	f000 fc94 	bl	8007178 <_init>
 8006850:	1ba4      	subs	r4, r4, r6
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	2500      	movs	r5, #0
 8006856:	42a5      	cmp	r5, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006860:	4798      	blx	r3
 8006862:	3501      	adds	r5, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800686a:	4798      	blx	r3
 800686c:	3501      	adds	r5, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	080072ac 	.word	0x080072ac
 8006874:	080072ac 	.word	0x080072ac
 8006878:	080072ac 	.word	0x080072ac
 800687c:	080072b0 	.word	0x080072b0

08006880 <memcpy>:
 8006880:	b510      	push	{r4, lr}
 8006882:	1e43      	subs	r3, r0, #1
 8006884:	440a      	add	r2, r1
 8006886:	4291      	cmp	r1, r2
 8006888:	d100      	bne.n	800688c <memcpy+0xc>
 800688a:	bd10      	pop	{r4, pc}
 800688c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006894:	e7f7      	b.n	8006886 <memcpy+0x6>

08006896 <memset>:
 8006896:	4402      	add	r2, r0
 8006898:	4603      	mov	r3, r0
 800689a:	4293      	cmp	r3, r2
 800689c:	d100      	bne.n	80068a0 <memset+0xa>
 800689e:	4770      	bx	lr
 80068a0:	f803 1b01 	strb.w	r1, [r3], #1
 80068a4:	e7f9      	b.n	800689a <memset+0x4>
	...

080068a8 <_puts_r>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	460e      	mov	r6, r1
 80068ac:	4605      	mov	r5, r0
 80068ae:	b118      	cbz	r0, 80068b8 <_puts_r+0x10>
 80068b0:	6983      	ldr	r3, [r0, #24]
 80068b2:	b90b      	cbnz	r3, 80068b8 <_puts_r+0x10>
 80068b4:	f000 fa0c 	bl	8006cd0 <__sinit>
 80068b8:	69ab      	ldr	r3, [r5, #24]
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	b913      	cbnz	r3, 80068c4 <_puts_r+0x1c>
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 fa06 	bl	8006cd0 <__sinit>
 80068c4:	4b23      	ldr	r3, [pc, #140]	; (8006954 <_puts_r+0xac>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d117      	bne.n	80068fa <_puts_r+0x52>
 80068ca:	686c      	ldr	r4, [r5, #4]
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	071b      	lsls	r3, r3, #28
 80068d0:	d51d      	bpl.n	800690e <_puts_r+0x66>
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	b1db      	cbz	r3, 800690e <_puts_r+0x66>
 80068d6:	3e01      	subs	r6, #1
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068de:	3b01      	subs	r3, #1
 80068e0:	60a3      	str	r3, [r4, #8]
 80068e2:	b9e9      	cbnz	r1, 8006920 <_puts_r+0x78>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da2e      	bge.n	8006946 <_puts_r+0x9e>
 80068e8:	4622      	mov	r2, r4
 80068ea:	210a      	movs	r1, #10
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f83f 	bl	8006970 <__swbuf_r>
 80068f2:	3001      	adds	r0, #1
 80068f4:	d011      	beq.n	800691a <_puts_r+0x72>
 80068f6:	200a      	movs	r0, #10
 80068f8:	e011      	b.n	800691e <_puts_r+0x76>
 80068fa:	4b17      	ldr	r3, [pc, #92]	; (8006958 <_puts_r+0xb0>)
 80068fc:	429c      	cmp	r4, r3
 80068fe:	d101      	bne.n	8006904 <_puts_r+0x5c>
 8006900:	68ac      	ldr	r4, [r5, #8]
 8006902:	e7e3      	b.n	80068cc <_puts_r+0x24>
 8006904:	4b15      	ldr	r3, [pc, #84]	; (800695c <_puts_r+0xb4>)
 8006906:	429c      	cmp	r4, r3
 8006908:	bf08      	it	eq
 800690a:	68ec      	ldreq	r4, [r5, #12]
 800690c:	e7de      	b.n	80068cc <_puts_r+0x24>
 800690e:	4621      	mov	r1, r4
 8006910:	4628      	mov	r0, r5
 8006912:	f000 f87f 	bl	8006a14 <__swsetup_r>
 8006916:	2800      	cmp	r0, #0
 8006918:	d0dd      	beq.n	80068d6 <_puts_r+0x2e>
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	bd70      	pop	{r4, r5, r6, pc}
 8006920:	2b00      	cmp	r3, #0
 8006922:	da04      	bge.n	800692e <_puts_r+0x86>
 8006924:	69a2      	ldr	r2, [r4, #24]
 8006926:	429a      	cmp	r2, r3
 8006928:	dc06      	bgt.n	8006938 <_puts_r+0x90>
 800692a:	290a      	cmp	r1, #10
 800692c:	d004      	beq.n	8006938 <_puts_r+0x90>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	7019      	strb	r1, [r3, #0]
 8006936:	e7cf      	b.n	80068d8 <_puts_r+0x30>
 8006938:	4622      	mov	r2, r4
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f818 	bl	8006970 <__swbuf_r>
 8006940:	3001      	adds	r0, #1
 8006942:	d1c9      	bne.n	80068d8 <_puts_r+0x30>
 8006944:	e7e9      	b.n	800691a <_puts_r+0x72>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	200a      	movs	r0, #10
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	7018      	strb	r0, [r3, #0]
 8006950:	e7e5      	b.n	800691e <_puts_r+0x76>
 8006952:	bf00      	nop
 8006954:	08007264 	.word	0x08007264
 8006958:	08007284 	.word	0x08007284
 800695c:	08007244 	.word	0x08007244

08006960 <puts>:
 8006960:	4b02      	ldr	r3, [pc, #8]	; (800696c <puts+0xc>)
 8006962:	4601      	mov	r1, r0
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	f7ff bf9f 	b.w	80068a8 <_puts_r>
 800696a:	bf00      	nop
 800696c:	20000010 	.word	0x20000010

08006970 <__swbuf_r>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	460e      	mov	r6, r1
 8006974:	4614      	mov	r4, r2
 8006976:	4605      	mov	r5, r0
 8006978:	b118      	cbz	r0, 8006982 <__swbuf_r+0x12>
 800697a:	6983      	ldr	r3, [r0, #24]
 800697c:	b90b      	cbnz	r3, 8006982 <__swbuf_r+0x12>
 800697e:	f000 f9a7 	bl	8006cd0 <__sinit>
 8006982:	4b21      	ldr	r3, [pc, #132]	; (8006a08 <__swbuf_r+0x98>)
 8006984:	429c      	cmp	r4, r3
 8006986:	d12a      	bne.n	80069de <__swbuf_r+0x6e>
 8006988:	686c      	ldr	r4, [r5, #4]
 800698a:	69a3      	ldr	r3, [r4, #24]
 800698c:	60a3      	str	r3, [r4, #8]
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	071a      	lsls	r2, r3, #28
 8006992:	d52e      	bpl.n	80069f2 <__swbuf_r+0x82>
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	b363      	cbz	r3, 80069f2 <__swbuf_r+0x82>
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	6820      	ldr	r0, [r4, #0]
 800699c:	1ac0      	subs	r0, r0, r3
 800699e:	6963      	ldr	r3, [r4, #20]
 80069a0:	b2f6      	uxtb	r6, r6
 80069a2:	4283      	cmp	r3, r0
 80069a4:	4637      	mov	r7, r6
 80069a6:	dc04      	bgt.n	80069b2 <__swbuf_r+0x42>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f926 	bl	8006bfc <_fflush_r>
 80069b0:	bb28      	cbnz	r0, 80069fe <__swbuf_r+0x8e>
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	60a3      	str	r3, [r4, #8]
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	6022      	str	r2, [r4, #0]
 80069be:	701e      	strb	r6, [r3, #0]
 80069c0:	6963      	ldr	r3, [r4, #20]
 80069c2:	3001      	adds	r0, #1
 80069c4:	4283      	cmp	r3, r0
 80069c6:	d004      	beq.n	80069d2 <__swbuf_r+0x62>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	07db      	lsls	r3, r3, #31
 80069cc:	d519      	bpl.n	8006a02 <__swbuf_r+0x92>
 80069ce:	2e0a      	cmp	r6, #10
 80069d0:	d117      	bne.n	8006a02 <__swbuf_r+0x92>
 80069d2:	4621      	mov	r1, r4
 80069d4:	4628      	mov	r0, r5
 80069d6:	f000 f911 	bl	8006bfc <_fflush_r>
 80069da:	b190      	cbz	r0, 8006a02 <__swbuf_r+0x92>
 80069dc:	e00f      	b.n	80069fe <__swbuf_r+0x8e>
 80069de:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <__swbuf_r+0x9c>)
 80069e0:	429c      	cmp	r4, r3
 80069e2:	d101      	bne.n	80069e8 <__swbuf_r+0x78>
 80069e4:	68ac      	ldr	r4, [r5, #8]
 80069e6:	e7d0      	b.n	800698a <__swbuf_r+0x1a>
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <__swbuf_r+0xa0>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	bf08      	it	eq
 80069ee:	68ec      	ldreq	r4, [r5, #12]
 80069f0:	e7cb      	b.n	800698a <__swbuf_r+0x1a>
 80069f2:	4621      	mov	r1, r4
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 f80d 	bl	8006a14 <__swsetup_r>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d0cc      	beq.n	8006998 <__swbuf_r+0x28>
 80069fe:	f04f 37ff 	mov.w	r7, #4294967295
 8006a02:	4638      	mov	r0, r7
 8006a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a06:	bf00      	nop
 8006a08:	08007264 	.word	0x08007264
 8006a0c:	08007284 	.word	0x08007284
 8006a10:	08007244 	.word	0x08007244

08006a14 <__swsetup_r>:
 8006a14:	4b32      	ldr	r3, [pc, #200]	; (8006ae0 <__swsetup_r+0xcc>)
 8006a16:	b570      	push	{r4, r5, r6, lr}
 8006a18:	681d      	ldr	r5, [r3, #0]
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	b125      	cbz	r5, 8006a2a <__swsetup_r+0x16>
 8006a20:	69ab      	ldr	r3, [r5, #24]
 8006a22:	b913      	cbnz	r3, 8006a2a <__swsetup_r+0x16>
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f953 	bl	8006cd0 <__sinit>
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <__swsetup_r+0xd0>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d10f      	bne.n	8006a50 <__swsetup_r+0x3c>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	0715      	lsls	r5, r2, #28
 8006a3a:	d42c      	bmi.n	8006a96 <__swsetup_r+0x82>
 8006a3c:	06d0      	lsls	r0, r2, #27
 8006a3e:	d411      	bmi.n	8006a64 <__swsetup_r+0x50>
 8006a40:	2209      	movs	r2, #9
 8006a42:	6032      	str	r2, [r6, #0]
 8006a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4e:	e03e      	b.n	8006ace <__swsetup_r+0xba>
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <__swsetup_r+0xd4>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d101      	bne.n	8006a5a <__swsetup_r+0x46>
 8006a56:	68ac      	ldr	r4, [r5, #8]
 8006a58:	e7eb      	b.n	8006a32 <__swsetup_r+0x1e>
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <__swsetup_r+0xd8>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	bf08      	it	eq
 8006a60:	68ec      	ldreq	r4, [r5, #12]
 8006a62:	e7e6      	b.n	8006a32 <__swsetup_r+0x1e>
 8006a64:	0751      	lsls	r1, r2, #29
 8006a66:	d512      	bpl.n	8006a8e <__swsetup_r+0x7a>
 8006a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a6a:	b141      	cbz	r1, 8006a7e <__swsetup_r+0x6a>
 8006a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a70:	4299      	cmp	r1, r3
 8006a72:	d002      	beq.n	8006a7a <__swsetup_r+0x66>
 8006a74:	4630      	mov	r0, r6
 8006a76:	f000 fa19 	bl	8006eac <_free_r>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	2300      	movs	r3, #0
 8006a88:	6063      	str	r3, [r4, #4]
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f043 0308 	orr.w	r3, r3, #8
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	b94b      	cbnz	r3, 8006aae <__swsetup_r+0x9a>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa4:	d003      	beq.n	8006aae <__swsetup_r+0x9a>
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f9bf 	bl	8006e2c <__smakebuf_r>
 8006aae:	89a2      	ldrh	r2, [r4, #12]
 8006ab0:	f012 0301 	ands.w	r3, r2, #1
 8006ab4:	d00c      	beq.n	8006ad0 <__swsetup_r+0xbc>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60a3      	str	r3, [r4, #8]
 8006aba:	6963      	ldr	r3, [r4, #20]
 8006abc:	425b      	negs	r3, r3
 8006abe:	61a3      	str	r3, [r4, #24]
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	b953      	cbnz	r3, 8006ada <__swsetup_r+0xc6>
 8006ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006acc:	d1ba      	bne.n	8006a44 <__swsetup_r+0x30>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	0792      	lsls	r2, r2, #30
 8006ad2:	bf58      	it	pl
 8006ad4:	6963      	ldrpl	r3, [r4, #20]
 8006ad6:	60a3      	str	r3, [r4, #8]
 8006ad8:	e7f2      	b.n	8006ac0 <__swsetup_r+0xac>
 8006ada:	2000      	movs	r0, #0
 8006adc:	e7f7      	b.n	8006ace <__swsetup_r+0xba>
 8006ade:	bf00      	nop
 8006ae0:	20000010 	.word	0x20000010
 8006ae4:	08007264 	.word	0x08007264
 8006ae8:	08007284 	.word	0x08007284
 8006aec:	08007244 	.word	0x08007244

08006af0 <__sflush_r>:
 8006af0:	898a      	ldrh	r2, [r1, #12]
 8006af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af6:	4605      	mov	r5, r0
 8006af8:	0710      	lsls	r0, r2, #28
 8006afa:	460c      	mov	r4, r1
 8006afc:	d458      	bmi.n	8006bb0 <__sflush_r+0xc0>
 8006afe:	684b      	ldr	r3, [r1, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc05      	bgt.n	8006b10 <__sflush_r+0x20>
 8006b04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dc02      	bgt.n	8006b10 <__sflush_r+0x20>
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d0f9      	beq.n	8006b0a <__sflush_r+0x1a>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b1c:	682f      	ldr	r7, [r5, #0]
 8006b1e:	6a21      	ldr	r1, [r4, #32]
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	d032      	beq.n	8006b8a <__sflush_r+0x9a>
 8006b24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	075a      	lsls	r2, r3, #29
 8006b2a:	d505      	bpl.n	8006b38 <__sflush_r+0x48>
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	1ac0      	subs	r0, r0, r3
 8006b30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b32:	b10b      	cbz	r3, 8006b38 <__sflush_r+0x48>
 8006b34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b36:	1ac0      	subs	r0, r0, r3
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b3e:	6a21      	ldr	r1, [r4, #32]
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b0      	blx	r6
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	d106      	bne.n	8006b58 <__sflush_r+0x68>
 8006b4a:	6829      	ldr	r1, [r5, #0]
 8006b4c:	291d      	cmp	r1, #29
 8006b4e:	d848      	bhi.n	8006be2 <__sflush_r+0xf2>
 8006b50:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <__sflush_r+0x108>)
 8006b52:	40ca      	lsrs	r2, r1
 8006b54:	07d6      	lsls	r6, r2, #31
 8006b56:	d544      	bpl.n	8006be2 <__sflush_r+0xf2>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	6062      	str	r2, [r4, #4]
 8006b5c:	04d9      	lsls	r1, r3, #19
 8006b5e:	6922      	ldr	r2, [r4, #16]
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	d504      	bpl.n	8006b6e <__sflush_r+0x7e>
 8006b64:	1c42      	adds	r2, r0, #1
 8006b66:	d101      	bne.n	8006b6c <__sflush_r+0x7c>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b903      	cbnz	r3, 8006b6e <__sflush_r+0x7e>
 8006b6c:	6560      	str	r0, [r4, #84]	; 0x54
 8006b6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b70:	602f      	str	r7, [r5, #0]
 8006b72:	2900      	cmp	r1, #0
 8006b74:	d0c9      	beq.n	8006b0a <__sflush_r+0x1a>
 8006b76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	d002      	beq.n	8006b84 <__sflush_r+0x94>
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 f994 	bl	8006eac <_free_r>
 8006b84:	2000      	movs	r0, #0
 8006b86:	6360      	str	r0, [r4, #52]	; 0x34
 8006b88:	e7c0      	b.n	8006b0c <__sflush_r+0x1c>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b0      	blx	r6
 8006b90:	1c41      	adds	r1, r0, #1
 8006b92:	d1c8      	bne.n	8006b26 <__sflush_r+0x36>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0c5      	beq.n	8006b26 <__sflush_r+0x36>
 8006b9a:	2b1d      	cmp	r3, #29
 8006b9c:	d001      	beq.n	8006ba2 <__sflush_r+0xb2>
 8006b9e:	2b16      	cmp	r3, #22
 8006ba0:	d101      	bne.n	8006ba6 <__sflush_r+0xb6>
 8006ba2:	602f      	str	r7, [r5, #0]
 8006ba4:	e7b1      	b.n	8006b0a <__sflush_r+0x1a>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	e7ad      	b.n	8006b0c <__sflush_r+0x1c>
 8006bb0:	690f      	ldr	r7, [r1, #16]
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	d0a9      	beq.n	8006b0a <__sflush_r+0x1a>
 8006bb6:	0793      	lsls	r3, r2, #30
 8006bb8:	680e      	ldr	r6, [r1, #0]
 8006bba:	bf08      	it	eq
 8006bbc:	694b      	ldreq	r3, [r1, #20]
 8006bbe:	600f      	str	r7, [r1, #0]
 8006bc0:	bf18      	it	ne
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	eba6 0807 	sub.w	r8, r6, r7
 8006bc8:	608b      	str	r3, [r1, #8]
 8006bca:	f1b8 0f00 	cmp.w	r8, #0
 8006bce:	dd9c      	ble.n	8006b0a <__sflush_r+0x1a>
 8006bd0:	4643      	mov	r3, r8
 8006bd2:	463a      	mov	r2, r7
 8006bd4:	6a21      	ldr	r1, [r4, #32]
 8006bd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b0      	blx	r6
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	dc06      	bgt.n	8006bee <__sflush_r+0xfe>
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	e78e      	b.n	8006b0c <__sflush_r+0x1c>
 8006bee:	4407      	add	r7, r0
 8006bf0:	eba8 0800 	sub.w	r8, r8, r0
 8006bf4:	e7e9      	b.n	8006bca <__sflush_r+0xda>
 8006bf6:	bf00      	nop
 8006bf8:	20400001 	.word	0x20400001

08006bfc <_fflush_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	b1db      	cbz	r3, 8006c3e <_fflush_r+0x42>
 8006c06:	b118      	cbz	r0, 8006c10 <_fflush_r+0x14>
 8006c08:	6983      	ldr	r3, [r0, #24]
 8006c0a:	b90b      	cbnz	r3, 8006c10 <_fflush_r+0x14>
 8006c0c:	f000 f860 	bl	8006cd0 <__sinit>
 8006c10:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <_fflush_r+0x48>)
 8006c12:	429c      	cmp	r4, r3
 8006c14:	d109      	bne.n	8006c2a <_fflush_r+0x2e>
 8006c16:	686c      	ldr	r4, [r5, #4]
 8006c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c1c:	b17b      	cbz	r3, 8006c3e <_fflush_r+0x42>
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c26:	f7ff bf63 	b.w	8006af0 <__sflush_r>
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <_fflush_r+0x4c>)
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	d101      	bne.n	8006c34 <_fflush_r+0x38>
 8006c30:	68ac      	ldr	r4, [r5, #8]
 8006c32:	e7f1      	b.n	8006c18 <_fflush_r+0x1c>
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <_fflush_r+0x50>)
 8006c36:	429c      	cmp	r4, r3
 8006c38:	bf08      	it	eq
 8006c3a:	68ec      	ldreq	r4, [r5, #12]
 8006c3c:	e7ec      	b.n	8006c18 <_fflush_r+0x1c>
 8006c3e:	2000      	movs	r0, #0
 8006c40:	bd38      	pop	{r3, r4, r5, pc}
 8006c42:	bf00      	nop
 8006c44:	08007264 	.word	0x08007264
 8006c48:	08007284 	.word	0x08007284
 8006c4c:	08007244 	.word	0x08007244

08006c50 <std>:
 8006c50:	2300      	movs	r3, #0
 8006c52:	b510      	push	{r4, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	e9c0 3300 	strd	r3, r3, [r0]
 8006c5a:	6083      	str	r3, [r0, #8]
 8006c5c:	8181      	strh	r1, [r0, #12]
 8006c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c60:	81c2      	strh	r2, [r0, #14]
 8006c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c66:	6183      	str	r3, [r0, #24]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	305c      	adds	r0, #92	; 0x5c
 8006c6e:	f7ff fe12 	bl	8006896 <memset>
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <std+0x38>)
 8006c74:	6263      	str	r3, [r4, #36]	; 0x24
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x3c>)
 8006c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <std+0x40>)
 8006c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <std+0x44>)
 8006c80:	6224      	str	r4, [r4, #32]
 8006c82:	6323      	str	r3, [r4, #48]	; 0x30
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	bf00      	nop
 8006c88:	0800701d 	.word	0x0800701d
 8006c8c:	0800703f 	.word	0x0800703f
 8006c90:	08007077 	.word	0x08007077
 8006c94:	0800709b 	.word	0x0800709b

08006c98 <_cleanup_r>:
 8006c98:	4901      	ldr	r1, [pc, #4]	; (8006ca0 <_cleanup_r+0x8>)
 8006c9a:	f000 b885 	b.w	8006da8 <_fwalk_reent>
 8006c9e:	bf00      	nop
 8006ca0:	08006bfd 	.word	0x08006bfd

08006ca4 <__sfmoreglue>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	1e4a      	subs	r2, r1, #1
 8006ca8:	2568      	movs	r5, #104	; 0x68
 8006caa:	4355      	muls	r5, r2
 8006cac:	460e      	mov	r6, r1
 8006cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cb2:	f000 f949 	bl	8006f48 <_malloc_r>
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	b140      	cbz	r0, 8006ccc <__sfmoreglue+0x28>
 8006cba:	2100      	movs	r1, #0
 8006cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8006cc0:	300c      	adds	r0, #12
 8006cc2:	60a0      	str	r0, [r4, #8]
 8006cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc8:	f7ff fde5 	bl	8006896 <memset>
 8006ccc:	4620      	mov	r0, r4
 8006cce:	bd70      	pop	{r4, r5, r6, pc}

08006cd0 <__sinit>:
 8006cd0:	6983      	ldr	r3, [r0, #24]
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	bb33      	cbnz	r3, 8006d26 <__sinit+0x56>
 8006cd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006cdc:	6503      	str	r3, [r0, #80]	; 0x50
 8006cde:	4b12      	ldr	r3, [pc, #72]	; (8006d28 <__sinit+0x58>)
 8006ce0:	4a12      	ldr	r2, [pc, #72]	; (8006d2c <__sinit+0x5c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6282      	str	r2, [r0, #40]	; 0x28
 8006ce6:	4298      	cmp	r0, r3
 8006ce8:	bf04      	itt	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	6183      	streq	r3, [r0, #24]
 8006cee:	f000 f81f 	bl	8006d30 <__sfp>
 8006cf2:	6060      	str	r0, [r4, #4]
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 f81b 	bl	8006d30 <__sfp>
 8006cfa:	60a0      	str	r0, [r4, #8]
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 f817 	bl	8006d30 <__sfp>
 8006d02:	2200      	movs	r2, #0
 8006d04:	60e0      	str	r0, [r4, #12]
 8006d06:	2104      	movs	r1, #4
 8006d08:	6860      	ldr	r0, [r4, #4]
 8006d0a:	f7ff ffa1 	bl	8006c50 <std>
 8006d0e:	2201      	movs	r2, #1
 8006d10:	2109      	movs	r1, #9
 8006d12:	68a0      	ldr	r0, [r4, #8]
 8006d14:	f7ff ff9c 	bl	8006c50 <std>
 8006d18:	2202      	movs	r2, #2
 8006d1a:	2112      	movs	r1, #18
 8006d1c:	68e0      	ldr	r0, [r4, #12]
 8006d1e:	f7ff ff97 	bl	8006c50 <std>
 8006d22:	2301      	movs	r3, #1
 8006d24:	61a3      	str	r3, [r4, #24]
 8006d26:	bd10      	pop	{r4, pc}
 8006d28:	08007240 	.word	0x08007240
 8006d2c:	08006c99 	.word	0x08006c99

08006d30 <__sfp>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <__sfp+0x70>)
 8006d34:	681e      	ldr	r6, [r3, #0]
 8006d36:	69b3      	ldr	r3, [r6, #24]
 8006d38:	4607      	mov	r7, r0
 8006d3a:	b913      	cbnz	r3, 8006d42 <__sfp+0x12>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7ff ffc7 	bl	8006cd0 <__sinit>
 8006d42:	3648      	adds	r6, #72	; 0x48
 8006d44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	d503      	bpl.n	8006d54 <__sfp+0x24>
 8006d4c:	6833      	ldr	r3, [r6, #0]
 8006d4e:	b133      	cbz	r3, 8006d5e <__sfp+0x2e>
 8006d50:	6836      	ldr	r6, [r6, #0]
 8006d52:	e7f7      	b.n	8006d44 <__sfp+0x14>
 8006d54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d58:	b16d      	cbz	r5, 8006d76 <__sfp+0x46>
 8006d5a:	3468      	adds	r4, #104	; 0x68
 8006d5c:	e7f4      	b.n	8006d48 <__sfp+0x18>
 8006d5e:	2104      	movs	r1, #4
 8006d60:	4638      	mov	r0, r7
 8006d62:	f7ff ff9f 	bl	8006ca4 <__sfmoreglue>
 8006d66:	6030      	str	r0, [r6, #0]
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d1f1      	bne.n	8006d50 <__sfp+0x20>
 8006d6c:	230c      	movs	r3, #12
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	4604      	mov	r4, r0
 8006d72:	4620      	mov	r0, r4
 8006d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <__sfp+0x74>)
 8006d78:	6665      	str	r5, [r4, #100]	; 0x64
 8006d7a:	e9c4 5500 	strd	r5, r5, [r4]
 8006d7e:	60a5      	str	r5, [r4, #8]
 8006d80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006d84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d90:	f7ff fd81 	bl	8006896 <memset>
 8006d94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d9c:	e7e9      	b.n	8006d72 <__sfp+0x42>
 8006d9e:	bf00      	nop
 8006da0:	08007240 	.word	0x08007240
 8006da4:	ffff0001 	.word	0xffff0001

08006da8 <_fwalk_reent>:
 8006da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dac:	4680      	mov	r8, r0
 8006dae:	4689      	mov	r9, r1
 8006db0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006db4:	2600      	movs	r6, #0
 8006db6:	b914      	cbnz	r4, 8006dbe <_fwalk_reent+0x16>
 8006db8:	4630      	mov	r0, r6
 8006dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006dc2:	3f01      	subs	r7, #1
 8006dc4:	d501      	bpl.n	8006dca <_fwalk_reent+0x22>
 8006dc6:	6824      	ldr	r4, [r4, #0]
 8006dc8:	e7f5      	b.n	8006db6 <_fwalk_reent+0xe>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d907      	bls.n	8006de0 <_fwalk_reent+0x38>
 8006dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	d003      	beq.n	8006de0 <_fwalk_reent+0x38>
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4640      	mov	r0, r8
 8006ddc:	47c8      	blx	r9
 8006dde:	4306      	orrs	r6, r0
 8006de0:	3568      	adds	r5, #104	; 0x68
 8006de2:	e7ee      	b.n	8006dc2 <_fwalk_reent+0x1a>

08006de4 <__swhatbuf_r>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	460e      	mov	r6, r1
 8006de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dec:	2900      	cmp	r1, #0
 8006dee:	b096      	sub	sp, #88	; 0x58
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	da07      	bge.n	8006e06 <__swhatbuf_r+0x22>
 8006df6:	2300      	movs	r3, #0
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	89b3      	ldrh	r3, [r6, #12]
 8006dfc:	061a      	lsls	r2, r3, #24
 8006dfe:	d410      	bmi.n	8006e22 <__swhatbuf_r+0x3e>
 8006e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e04:	e00e      	b.n	8006e24 <__swhatbuf_r+0x40>
 8006e06:	466a      	mov	r2, sp
 8006e08:	f000 f96e 	bl	80070e8 <_fstat_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	dbf2      	blt.n	8006df6 <__swhatbuf_r+0x12>
 8006e10:	9a01      	ldr	r2, [sp, #4]
 8006e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e1a:	425a      	negs	r2, r3
 8006e1c:	415a      	adcs	r2, r3
 8006e1e:	602a      	str	r2, [r5, #0]
 8006e20:	e7ee      	b.n	8006e00 <__swhatbuf_r+0x1c>
 8006e22:	2340      	movs	r3, #64	; 0x40
 8006e24:	2000      	movs	r0, #0
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	b016      	add	sp, #88	; 0x58
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}

08006e2c <__smakebuf_r>:
 8006e2c:	898b      	ldrh	r3, [r1, #12]
 8006e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e30:	079d      	lsls	r5, r3, #30
 8006e32:	4606      	mov	r6, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	d507      	bpl.n	8006e48 <__smakebuf_r+0x1c>
 8006e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	2301      	movs	r3, #1
 8006e42:	6163      	str	r3, [r4, #20]
 8006e44:	b002      	add	sp, #8
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	ab01      	add	r3, sp, #4
 8006e4a:	466a      	mov	r2, sp
 8006e4c:	f7ff ffca 	bl	8006de4 <__swhatbuf_r>
 8006e50:	9900      	ldr	r1, [sp, #0]
 8006e52:	4605      	mov	r5, r0
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 f877 	bl	8006f48 <_malloc_r>
 8006e5a:	b948      	cbnz	r0, 8006e70 <__smakebuf_r+0x44>
 8006e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e60:	059a      	lsls	r2, r3, #22
 8006e62:	d4ef      	bmi.n	8006e44 <__smakebuf_r+0x18>
 8006e64:	f023 0303 	bic.w	r3, r3, #3
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	e7e3      	b.n	8006e38 <__smakebuf_r+0xc>
 8006e70:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <__smakebuf_r+0x7c>)
 8006e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	6020      	str	r0, [r4, #0]
 8006e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	6163      	str	r3, [r4, #20]
 8006e82:	9b01      	ldr	r3, [sp, #4]
 8006e84:	6120      	str	r0, [r4, #16]
 8006e86:	b15b      	cbz	r3, 8006ea0 <__smakebuf_r+0x74>
 8006e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f000 f93d 	bl	800710c <_isatty_r>
 8006e92:	b128      	cbz	r0, 8006ea0 <__smakebuf_r+0x74>
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	431d      	orrs	r5, r3
 8006ea4:	81a5      	strh	r5, [r4, #12]
 8006ea6:	e7cd      	b.n	8006e44 <__smakebuf_r+0x18>
 8006ea8:	08006c99 	.word	0x08006c99

08006eac <_free_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4605      	mov	r5, r0
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	d045      	beq.n	8006f40 <_free_r+0x94>
 8006eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb8:	1f0c      	subs	r4, r1, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bfb8      	it	lt
 8006ebe:	18e4      	addlt	r4, r4, r3
 8006ec0:	f000 f946 	bl	8007150 <__malloc_lock>
 8006ec4:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <_free_r+0x98>)
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	4610      	mov	r0, r2
 8006eca:	b933      	cbnz	r3, 8006eda <_free_r+0x2e>
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	6014      	str	r4, [r2, #0]
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed6:	f000 b93c 	b.w	8007152 <__malloc_unlock>
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	d90c      	bls.n	8006ef8 <_free_r+0x4c>
 8006ede:	6821      	ldr	r1, [r4, #0]
 8006ee0:	1862      	adds	r2, r4, r1
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	bf04      	itt	eq
 8006ee6:	681a      	ldreq	r2, [r3, #0]
 8006ee8:	685b      	ldreq	r3, [r3, #4]
 8006eea:	6063      	str	r3, [r4, #4]
 8006eec:	bf04      	itt	eq
 8006eee:	1852      	addeq	r2, r2, r1
 8006ef0:	6022      	streq	r2, [r4, #0]
 8006ef2:	6004      	str	r4, [r0, #0]
 8006ef4:	e7ec      	b.n	8006ed0 <_free_r+0x24>
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	b10a      	cbz	r2, 8006f00 <_free_r+0x54>
 8006efc:	42a2      	cmp	r2, r4
 8006efe:	d9fa      	bls.n	8006ef6 <_free_r+0x4a>
 8006f00:	6819      	ldr	r1, [r3, #0]
 8006f02:	1858      	adds	r0, r3, r1
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d10b      	bne.n	8006f20 <_free_r+0x74>
 8006f08:	6820      	ldr	r0, [r4, #0]
 8006f0a:	4401      	add	r1, r0
 8006f0c:	1858      	adds	r0, r3, r1
 8006f0e:	4282      	cmp	r2, r0
 8006f10:	6019      	str	r1, [r3, #0]
 8006f12:	d1dd      	bne.n	8006ed0 <_free_r+0x24>
 8006f14:	6810      	ldr	r0, [r2, #0]
 8006f16:	6852      	ldr	r2, [r2, #4]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	4401      	add	r1, r0
 8006f1c:	6019      	str	r1, [r3, #0]
 8006f1e:	e7d7      	b.n	8006ed0 <_free_r+0x24>
 8006f20:	d902      	bls.n	8006f28 <_free_r+0x7c>
 8006f22:	230c      	movs	r3, #12
 8006f24:	602b      	str	r3, [r5, #0]
 8006f26:	e7d3      	b.n	8006ed0 <_free_r+0x24>
 8006f28:	6820      	ldr	r0, [r4, #0]
 8006f2a:	1821      	adds	r1, r4, r0
 8006f2c:	428a      	cmp	r2, r1
 8006f2e:	bf04      	itt	eq
 8006f30:	6811      	ldreq	r1, [r2, #0]
 8006f32:	6852      	ldreq	r2, [r2, #4]
 8006f34:	6062      	str	r2, [r4, #4]
 8006f36:	bf04      	itt	eq
 8006f38:	1809      	addeq	r1, r1, r0
 8006f3a:	6021      	streq	r1, [r4, #0]
 8006f3c:	605c      	str	r4, [r3, #4]
 8006f3e:	e7c7      	b.n	8006ed0 <_free_r+0x24>
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	bf00      	nop
 8006f44:	2000499c 	.word	0x2000499c

08006f48 <_malloc_r>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	1ccd      	adds	r5, r1, #3
 8006f4c:	f025 0503 	bic.w	r5, r5, #3
 8006f50:	3508      	adds	r5, #8
 8006f52:	2d0c      	cmp	r5, #12
 8006f54:	bf38      	it	cc
 8006f56:	250c      	movcc	r5, #12
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	db01      	blt.n	8006f62 <_malloc_r+0x1a>
 8006f5e:	42a9      	cmp	r1, r5
 8006f60:	d903      	bls.n	8006f6a <_malloc_r+0x22>
 8006f62:	230c      	movs	r3, #12
 8006f64:	6033      	str	r3, [r6, #0]
 8006f66:	2000      	movs	r0, #0
 8006f68:	bd70      	pop	{r4, r5, r6, pc}
 8006f6a:	f000 f8f1 	bl	8007150 <__malloc_lock>
 8006f6e:	4a21      	ldr	r2, [pc, #132]	; (8006ff4 <_malloc_r+0xac>)
 8006f70:	6814      	ldr	r4, [r2, #0]
 8006f72:	4621      	mov	r1, r4
 8006f74:	b991      	cbnz	r1, 8006f9c <_malloc_r+0x54>
 8006f76:	4c20      	ldr	r4, [pc, #128]	; (8006ff8 <_malloc_r+0xb0>)
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	b91b      	cbnz	r3, 8006f84 <_malloc_r+0x3c>
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 f83d 	bl	8006ffc <_sbrk_r>
 8006f82:	6020      	str	r0, [r4, #0]
 8006f84:	4629      	mov	r1, r5
 8006f86:	4630      	mov	r0, r6
 8006f88:	f000 f838 	bl	8006ffc <_sbrk_r>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d124      	bne.n	8006fda <_malloc_r+0x92>
 8006f90:	230c      	movs	r3, #12
 8006f92:	6033      	str	r3, [r6, #0]
 8006f94:	4630      	mov	r0, r6
 8006f96:	f000 f8dc 	bl	8007152 <__malloc_unlock>
 8006f9a:	e7e4      	b.n	8006f66 <_malloc_r+0x1e>
 8006f9c:	680b      	ldr	r3, [r1, #0]
 8006f9e:	1b5b      	subs	r3, r3, r5
 8006fa0:	d418      	bmi.n	8006fd4 <_malloc_r+0x8c>
 8006fa2:	2b0b      	cmp	r3, #11
 8006fa4:	d90f      	bls.n	8006fc6 <_malloc_r+0x7e>
 8006fa6:	600b      	str	r3, [r1, #0]
 8006fa8:	50cd      	str	r5, [r1, r3]
 8006faa:	18cc      	adds	r4, r1, r3
 8006fac:	4630      	mov	r0, r6
 8006fae:	f000 f8d0 	bl	8007152 <__malloc_unlock>
 8006fb2:	f104 000b 	add.w	r0, r4, #11
 8006fb6:	1d23      	adds	r3, r4, #4
 8006fb8:	f020 0007 	bic.w	r0, r0, #7
 8006fbc:	1ac3      	subs	r3, r0, r3
 8006fbe:	d0d3      	beq.n	8006f68 <_malloc_r+0x20>
 8006fc0:	425a      	negs	r2, r3
 8006fc2:	50e2      	str	r2, [r4, r3]
 8006fc4:	e7d0      	b.n	8006f68 <_malloc_r+0x20>
 8006fc6:	428c      	cmp	r4, r1
 8006fc8:	684b      	ldr	r3, [r1, #4]
 8006fca:	bf16      	itet	ne
 8006fcc:	6063      	strne	r3, [r4, #4]
 8006fce:	6013      	streq	r3, [r2, #0]
 8006fd0:	460c      	movne	r4, r1
 8006fd2:	e7eb      	b.n	8006fac <_malloc_r+0x64>
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	6849      	ldr	r1, [r1, #4]
 8006fd8:	e7cc      	b.n	8006f74 <_malloc_r+0x2c>
 8006fda:	1cc4      	adds	r4, r0, #3
 8006fdc:	f024 0403 	bic.w	r4, r4, #3
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	d005      	beq.n	8006ff0 <_malloc_r+0xa8>
 8006fe4:	1a21      	subs	r1, r4, r0
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f000 f808 	bl	8006ffc <_sbrk_r>
 8006fec:	3001      	adds	r0, #1
 8006fee:	d0cf      	beq.n	8006f90 <_malloc_r+0x48>
 8006ff0:	6025      	str	r5, [r4, #0]
 8006ff2:	e7db      	b.n	8006fac <_malloc_r+0x64>
 8006ff4:	2000499c 	.word	0x2000499c
 8006ff8:	200049a0 	.word	0x200049a0

08006ffc <_sbrk_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4c06      	ldr	r4, [pc, #24]	; (8007018 <_sbrk_r+0x1c>)
 8007000:	2300      	movs	r3, #0
 8007002:	4605      	mov	r5, r0
 8007004:	4608      	mov	r0, r1
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	f7f9 feae 	bl	8000d68 <_sbrk>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_sbrk_r+0x1a>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	b103      	cbz	r3, 8007016 <_sbrk_r+0x1a>
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20004ec4 	.word	0x20004ec4

0800701c <__sread>:
 800701c:	b510      	push	{r4, lr}
 800701e:	460c      	mov	r4, r1
 8007020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007024:	f000 f896 	bl	8007154 <_read_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	bfab      	itete	ge
 800702c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800702e:	89a3      	ldrhlt	r3, [r4, #12]
 8007030:	181b      	addge	r3, r3, r0
 8007032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007036:	bfac      	ite	ge
 8007038:	6563      	strge	r3, [r4, #84]	; 0x54
 800703a:	81a3      	strhlt	r3, [r4, #12]
 800703c:	bd10      	pop	{r4, pc}

0800703e <__swrite>:
 800703e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007042:	461f      	mov	r7, r3
 8007044:	898b      	ldrh	r3, [r1, #12]
 8007046:	05db      	lsls	r3, r3, #23
 8007048:	4605      	mov	r5, r0
 800704a:	460c      	mov	r4, r1
 800704c:	4616      	mov	r6, r2
 800704e:	d505      	bpl.n	800705c <__swrite+0x1e>
 8007050:	2302      	movs	r3, #2
 8007052:	2200      	movs	r2, #0
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	f000 f868 	bl	800712c <_lseek_r>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	4632      	mov	r2, r6
 800706a:	463b      	mov	r3, r7
 800706c:	4628      	mov	r0, r5
 800706e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007072:	f000 b817 	b.w	80070a4 <_write_r>

08007076 <__sseek>:
 8007076:	b510      	push	{r4, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707e:	f000 f855 	bl	800712c <_lseek_r>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	bf15      	itete	ne
 8007088:	6560      	strne	r0, [r4, #84]	; 0x54
 800708a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800708e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007092:	81a3      	strheq	r3, [r4, #12]
 8007094:	bf18      	it	ne
 8007096:	81a3      	strhne	r3, [r4, #12]
 8007098:	bd10      	pop	{r4, pc}

0800709a <__sclose>:
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 b813 	b.w	80070c8 <_close_r>
	...

080070a4 <_write_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4c07      	ldr	r4, [pc, #28]	; (80070c4 <_write_r+0x20>)
 80070a8:	4605      	mov	r5, r0
 80070aa:	4608      	mov	r0, r1
 80070ac:	4611      	mov	r1, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	6022      	str	r2, [r4, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f7f9 fc8c 	bl	80009d0 <_write>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_write_r+0x1e>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_write_r+0x1e>
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20004ec4 	.word	0x20004ec4

080070c8 <_close_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4c06      	ldr	r4, [pc, #24]	; (80070e4 <_close_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4605      	mov	r5, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	f7f9 fe13 	bl	8000cfe <_close>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_close_r+0x1a>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_close_r+0x1a>
 80070e0:	602b      	str	r3, [r5, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20004ec4 	.word	0x20004ec4

080070e8 <_fstat_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4c07      	ldr	r4, [pc, #28]	; (8007108 <_fstat_r+0x20>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4605      	mov	r5, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	f7f9 fe0e 	bl	8000d16 <_fstat>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	d102      	bne.n	8007104 <_fstat_r+0x1c>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	b103      	cbz	r3, 8007104 <_fstat_r+0x1c>
 8007102:	602b      	str	r3, [r5, #0]
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	20004ec4 	.word	0x20004ec4

0800710c <_isatty_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4c06      	ldr	r4, [pc, #24]	; (8007128 <_isatty_r+0x1c>)
 8007110:	2300      	movs	r3, #0
 8007112:	4605      	mov	r5, r0
 8007114:	4608      	mov	r0, r1
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	f7f9 fe0d 	bl	8000d36 <_isatty>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_isatty_r+0x1a>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	b103      	cbz	r3, 8007126 <_isatty_r+0x1a>
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20004ec4 	.word	0x20004ec4

0800712c <_lseek_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4c07      	ldr	r4, [pc, #28]	; (800714c <_lseek_r+0x20>)
 8007130:	4605      	mov	r5, r0
 8007132:	4608      	mov	r0, r1
 8007134:	4611      	mov	r1, r2
 8007136:	2200      	movs	r2, #0
 8007138:	6022      	str	r2, [r4, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f7f9 fe06 	bl	8000d4c <_lseek>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_lseek_r+0x1e>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	b103      	cbz	r3, 800714a <_lseek_r+0x1e>
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	20004ec4 	.word	0x20004ec4

08007150 <__malloc_lock>:
 8007150:	4770      	bx	lr

08007152 <__malloc_unlock>:
 8007152:	4770      	bx	lr

08007154 <_read_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4c07      	ldr	r4, [pc, #28]	; (8007174 <_read_r+0x20>)
 8007158:	4605      	mov	r5, r0
 800715a:	4608      	mov	r0, r1
 800715c:	4611      	mov	r1, r2
 800715e:	2200      	movs	r2, #0
 8007160:	6022      	str	r2, [r4, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	f7f9 fdae 	bl	8000cc4 <_read>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_read_r+0x1e>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	b103      	cbz	r3, 8007172 <_read_r+0x1e>
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	20004ec4 	.word	0x20004ec4

08007178 <_init>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr

08007184 <_fini>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr
